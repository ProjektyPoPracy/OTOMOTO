timeout = timeout ## Time required to interrupt the connection. Too low value should cause errors.
)
},
error = function(e)
{
message(paste0("An error has occured. ", e))
}
)
}
return(invisible())
}
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 15, ## Page number to stop; default 10; if NULL then running function to last page
init.df = NULL, ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers2", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 2 ## How many times the function has to be restarted
)
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 15, ## Page number to stop; default 10; if NULL then running function to last page
init.df = NULL, ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers2", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 2 ## How many times the function has to be restarted
)
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 15, ## Page number to stop; default 10; if NULL then running function to last page
init.df = "offers2", ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 2 ## How many times the function has to be restarted
)
getOffersInfo_avoidErr <- function(offer.type = "a", startPageNr = 1, stopPageNr = 10, init.df = NULL, output.name = "offers", sleep = 10, timeout = 4000000, n_iter = 100)
{
## Assign values for first loop requirement
assign(x = "metaData", value = list(pageNumber = startPageNr, ifFirstRun = TRUE), envir = globalenv())
for(i in seq_len(n_iter))
{
tryCatch(
expr = {
getOffersInfo(
offer.type = offer.type, ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = globalenv()$metaData$pageNumber, ## Page number to start; default 1
stopPageNr = stopPageNr, ## Page number to stop; default 10; if NULL then running function to last page
init.df = ifelse2(globalenv()$metaData$pageNumber > startPageNr, output.name, init.df), ## Declare data frame you have if you want add info about new offers to it
output.name = output.name, ## An output data frame name. Function create date frame with that name; default "offers"
sleep = sleep, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = timeout ## Time required to interrupt the connection. Too low value should cause errors.
)
},
error = function(e)
{
message(paste0("An ",i ,". error has occured. ", e))
}
)
}
return(invisible())
}
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 15, ## Page number to stop; default 10; if NULL then running function to last page
init.df = "offers", ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 2 ## How many times the function has to be restarted
)
save(offers, file = "./data/offers.RData")
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 15, ## Page number to stop; default 10; if NULL then running function to last page
init.df = NULL, ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 2 ## How many times the function has to be restarted
)
load("data/offers.RData")
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 15, ## Page number to stop; default 10; if NULL then running function to last page
init.df = "offers", ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 2 ## How many times the function has to be restarted
)
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 100, ## Page number to stop; default 10; if NULL then running function to last page
init.df = "offers", ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 200 ## How many times the function has to be restarted
)
nrow(offers)
length(unique(offers$Id))
save(offers, file = "./data/offers.RData")
if(2)
2
ifelse(2, 1, 2)
ifelse(2, 1, 3)
ifelse(10, 1, 3)
ifelse(0, 1, 3)
x <- 2;y <- 3; z <- 5
sum(ls())
ls
ls()
eval("x")
eval(text="x")
parse(text = "x")
expression("x")
eval(expression("x"))
eval("x")
eval(expr = "print(x)")
?eval
force(x = "x")
call("x")
ls()
call("sum", ls())
parse(text = ls())
eval(parse(text = ls()))
eval("sum(x,y,z)")
eval(expression("sum(x,y,z)"))
objects()
eval(parse(text = "sum(x,y,z)"))
eval(parse(text = "sum(ls())"))
paste(ls())
paste(ls(), collapse = ",")
parse(text = paste0("ls(",paste(ls(), collapse = ","), ")"))
eval(]parse(text = paste0("ls(",paste(ls(), collapse = ","), ")")))
eval(parse(text = paste0("ls(",paste(ls(), collapse = ","), ")")))
eval(parse(text = paste0("sum(",paste(ls(), collapse = ","), ")")))
?ls()
paste0(ls(envir = environment()), collapse = ",")
eval(parse(text = paste0("sum(", paste0(ls(envir = environment()), collapse = ","), ")")))
eval(parse(text = paste0("length(", paste0(ls(envir = environment()), collapse = ","), ")")))
eval(parse(text = paste0("length(", ls(), ")")))
ls()
length(ls(envir = environment()))
X <- data.frame(matrix(nrow = 2, 2))
View(X)
1:4,
X <- data.frame(matrix(, 1:4, nrow = 2, ncol = 2))
X <- data.frame(matrix(1:4, nrow = 2, ncol = 2))
X
rbind(X, NULL)
rm(list = ls())
nList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
rm(list = ls())
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
load("data/offers.RData")
nrow(offers)
length(unique(offers$Id))
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 2, ## Page number to stop; default 10; if NULL then running function to last page
init.df = "offers", ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 200 ## How many times the function has to be restarted
)
checkCorrectnessOfOfferValues <-
function(
offerId,
offerPrice,
dealerType,
dealerLocation,
paramLabels,
paramValues,
equipmentLabels,
description
)
{
ifCorrectOfferId <- checkCorrectnessOfOfferId(offerId = offerId)
ifCorrectOfferPrice <- checkCorrectnessOfOfferPrice(offerPrice = offerPrice)
ifCorrectDealerType <- checkCorrectnessOfDealerType(dealerType = dealerType)
ifCorrectDealerLocation <- checkCorrectnessOfDealerLocation(dealerLocation = dealerLocation)
ifCorrectParamLabelsAndValues <- checkCorrectnessOfParamLabelsAndValues(labels = paramLabels, values = paramValues)
ifCorrectEquipmentLabels <- checkCorrectnessOfEquipmentLabels(equipment = equipmentLabels)
ifCorrectDescription <- checkCorrectnessOfDescription(description = description)
howManyCorrectValues <- eval(parse(text = paste0("sum(", paste0(ls(envir = environment(), pattern = "^ifCorrect"), collapse = ","), ")")))
maxNumberOfCorrectValues <- length(ls(envir = environment()))
ifAllTrueAnswers <- howManyCorrectValues == maxNumberOfCorrectValues
return(ifAllTrueAnswers)
}
nrow(offers)
length(unique(offers$Id))
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 2, ## Page number to stop; default 10; if NULL then running function to last page
init.df = "offers", ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 200 ## How many times the function has to be restarted
)
warnings()
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 2, ## Page number to stop; default 10; if NULL then running function to last page
init.df = "offers", ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 200 ## How many times the function has to be restarted untill will be terminated
)
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 2, ## Page number to stop; default 10; if NULL then running function to last page
init.df = "offers", ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 200 ## How many times the function has to be restarted untill will be terminated
)
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 50, ## Page number to stop; default 10; if NULL then running function to last page
init.df = "offers", ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 200 ## How many times the function has to be restarted untill will be terminated
)
nrow(offers)
length(unique(offers$Id))
length(ls(envir = environment(), pattern = "^ifCorrect"))
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 2, ## Page number to stop; default 10; if NULL then running function to last page
init.df = "offers", ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 200 ## How many times the function has to be restarted untill will be terminated
)
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
load("data/offers.RData")
## Koniecznie należy dodać warunek kończący funkcję w momencie skończenia czytania ostatniej strony!!!
## Zamiast pętli for użyć while w funkcji getOffersInfo_avoidErr z odpowiednimi warunkami wyjścia
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 2, ## Page number to stop; default 10; if NULL then running function to last page
init.df = "offers", ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 5 ## How many times the function has to be restarted untill will be terminated
)
mean(2)
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
## Koniecznie należy dodać warunek kończący funkcję w momencie skończenia czytania ostatniej strony!!!
## Zamiast pętli for użyć while w funkcji getOffersInfo_avoidErr z odpowiednimi warunkami wyjścia
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 2, ## Page number to stop; default 10; if NULL then running function to last page
init.df = "offers", ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 2 ## How many times the function has to be restarted untill will be terminated
)
c(1,2) %in% logical(0)
!(c(1,2) %in% logical(0))
head(offers$Id)
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 2, ## Page number to stop; default 10; if NULL then running function to last page
init.df = "offers", ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 2 ## How many times the function has to be restarted untill will be terminated
)
checkIfUniqueOffer <- function(newIds = offerIds, alreadyScrapedIds)
{
ifUniqueId <- !(newIds %in% alreadyScrapedIds)
return(ifUniqueId)
}
get(metaData$ifFirstRun, envir = globalenv())
ifFirstRun = get(x = metaData$ifFirstRun, envir = globalenv())
assign(x = "metaData",
value = list(pageNumber = currentlyPageNr,
ifFirstRun = get(x = "metaData$ifFirstRun", envir = globalenv()),
ifStopFunction = TRUE),
envir = globalenv())
et(x = "metaData$ifFirstRun", envir = globalenv())
ifFirstRun = get(x = "metaData['ifFirstRun']", envir = globalenv())
metaData$ifFirstRun
get(x = "metaData", envir = globalenv())$ifFirstRun
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
# Zamiast pętli for użyć while w funkcji getOffersInfo_avoidErr z odpowiednimi warunkami wyjścia
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 2, ## Page number to stop; default 10; if NULL then running function to last page
init.df = "offers", ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 5 ## How many times the function has to be restarted untill will be terminated
)
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
# Koniecznie należy dodać warunek kończący funkcję w momencie skończenia czytania ostatniej strony!!!
## Zamiast pętli for użyć while w funkcji getOffersInfo_avoidErr z odpowiednimi warunkami wyjścia
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 2, ## Page number to stop; default 10; if NULL then running function to last page
init.df = "offers", ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 5 ## How many times the function has to be restarted untill will be terminated
)
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 2, ## Page number to stop; default 10; if NULL then running function to last page
init.df = "offers", ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 5 ## How many times the function has to be restarted untill will be terminated
)
checkingIfTerminateFunction <- function(currentPageNr, lastPageNr)
{
if(currentPageNr == lastPageNr )
{
assign(x = "metaData",
value = list(pageNumber = get(x = "metaData", envir = globalenv())$pageNumber,
ifFirstRun = get(x = "metaData", envir = globalenv())$ifFirstRun,
ifStopFunction = TRUE),
envir = globalenv())
}
return(invisible())
}
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
## Koniecznie należy dodać warunek kończący funkcję w momencie skończenia czytania ostatniej strony!!!
## Zamiast pętli for użyć while w funkcji getOffersInfo_avoidErr z odpowiednimi warunkami wyjścia
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 2, ## Page number to stop; default 10; if NULL then running function to last page
init.df = "offers", ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 5 ## How many times the function has to be restarted untill will be terminated
)
## Koniecznie należy dodać warunek kończący funkcję w momencie skończenia czytania ostatniej strony!!!
## Zamiast pętli for użyć while w funkcji getOffersInfo_avoidErr z odpowiednimi warunkami wyjścia
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 10, ## Page number to stop; default 10; if NULL then running function to last page
init.df = "offers", ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 5 ## How many times the function has to be restarted untill will be terminated
)
nrow(offers)
length(unique(offers$Id))
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 100, ## Page number to start; default 1
stopPageNr = 110, ## Page number to stop; default 10; if NULL then running function to last page
init.df = "offers", ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 5 ## How many times the function has to be restarted untill will be terminated
)
nrow(offers)
length(unique(offers$Id))
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 6000, ## Page number to start; default 1
stopPageNr = 6010, ## Page number to stop; default 10; if NULL then running function to last page
init.df = "offers", ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 5 ## How many times the function has to be restarted untill will be terminated
)
save(offers, file = "./data/offers.RData")
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 6500, ## Page number to start; default 1
stopPageNr = 6510, ## Page number to stop; default 10; if NULL then running function to last page
init.df = "offers", ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 5 ## How many times the function has to be restarted untill will be terminated
)
nrow(offers)
length(unique(offers$Id))
save(offers, file = "./data/offers.RData")
offers[offers$Label=="Marka", ]
unique(offers$Label)
table(offers[offers$Label=="Marka.pojazdu", "Value"])
sort(table(offers[offers$Label=="Marka.pojazdu", "Value"]))
sort(table(offers[offers$Label=="Marka.pojazdu", "Value"]), decreasing = TRUE)
save(offers, file = "./data/offers.RData")
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
load("data/offers.RData")
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 5734, ## Page number to start; default 1
stopPageNr = 5736, ## Page number to stop; default 10; if NULL then running function to last page
init.df = "offers", ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 5 ## How many times the function has to be restarted untill will be terminated
)
nrow(offers)
length(unique(offers$Id))
