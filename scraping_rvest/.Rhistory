timeout = timeout ## Time required to interrupt the connection. Too low value should cause errors.
)
},
error = function(e)
{
message(paste0("An error has occured. I am restarting the function from ", globalenv()$metaData$pageNumber, ". page."))
}
)
}
return(invisible())
}
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 100, ## Page number to stop; default 10; if NULL then running function to last page
init.df = "offers", ## Declare data frame you have if you want add info about new offers to it
output.name = "offers2", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 2 ## How many times the function has to be restarted
)
View(metaData)
getOffersInfo_avoidErr <- function(offer.type = "a", startPageNr = 1, stopPageNr = 10, init.df = NULL, output.name = "offers", sleep = 10, timeout = 4000000, n_iter = 100)
{
## Assign values in first loop
assign(x = "metaData", value = list(pageNumber = startPageNr, ifFirstRun = TRUE), envir = globalenv())
for(i in seq_len(n_iter))
{
tryCatch(
expr = {
getOffersInfo(
offer.type = offer.type, ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = globalenv()$metaData$pageNumber, ## Page number to start; default 1
stopPageNr = stopPageNr, ## Page number to stop; default 10; if NULL then running function to last page
init.df = ifelse2(is.null(init.df), NULL, init.df), ## Declare data frame you have if you want add info about new offers to it
output.name = output.name, ## An output data frame name. Function create date frame with that name; default "offers"
sleep = sleep, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = timeout ## Time required to interrupt the connection. Too low value should cause errors.
)
},
error = function(e)
{
message("An error has occured.")
}
)
}
return(invisible())
}
getOffersInfo_avoidErr <- function(offer.type = "a", startPageNr = 1, stopPageNr = 10, init.df = NULL, output.name = "offers", sleep = 10, timeout = 4000000, n_iter = 100)
{
## Assign values in first loop
assign(x = "metaData", value = list(pageNumber = startPageNr, ifFirstRun = TRUE), envir = globalenv())
for(i in seq_len(n_iter))
{
tryCatch(
expr = {
getOffersInfo(
offer.type = offer.type, ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = globalenv()$metaData$pageNumber, ## Page number to start; default 1
stopPageNr = stopPageNr, ## Page number to stop; default 10; if NULL then running function to last page
init.df = ifelse2(is.null(init.df), NULL, init.df), ## Declare data frame you have if you want add info about new offers to it
output.name = output.name, ## An output data frame name. Function create date frame with that name; default "offers"
sleep = sleep, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = timeout ## Time required to interrupt the connection. Too low value should cause errors.
)
},
error = function(e)
{
message("An error has occured.")
}
)
}
return(invisible())
}
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 100, ## Page number to stop; default 10; if NULL then running function to last page
init.df = "offers", ## Declare data frame you have if you want add info about new offers to it
output.name = "offers2", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 2 ## How many times the function has to be restarted
)
globalenv()$metaData$pageNumber
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 100, ## Page number to stop; default 10; if NULL then running function to last page
init.df = "offers", ## Declare data frame you have if you want add info about new offers to it
output.name = "offers2", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 5 ## How many times the function has to be restarted
)
checkInputAndOutputDependencies <- function(init.df, output.df)
{
ifDeclaredOutputDF <- exists( output.df, envir = globalenv() )
ifEqualInitAndOutput <- identical( x = init.df , y = output.df )
if( !globalenv()$metaData$ifFirstRun )
{
answer <- TRUE
messageText <- paste0("I am restarting the function from ", globalenv()$metaData$pageNumber, ". page.")
}
else if( ifDeclaredOutputDF &  ifEqualInitAndOutput)
{
answer <- yesOrNoQuestion(question = paste0("Are you sure to add new records to the existing data frame ", output.df, "? (y/n): "))
messageText <- "Run function with addition new rows to the existing data frame."
}
else if( ifDeclaredOutputDF & !ifEqualInitAndOutput )
{
answer <- yesOrNoQuestion(question = "Caution! Runnig function with different input and output data frame will cause overwrite existing data frame. Are you still want to overwrite output data frame with new data? (y/n): ")
messageText <- "The function will overwrite an existing data frame."
}
else if( !ifDeclaredOutputDF )
{
answer <- TRUE
messageText <- "A new data frame will be created."
}
if( answer )
{
message( messageText )
}
else
{
stop("\r Function has been terminated by user.")
}
return( invisible() )
}
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 10, ## Page number to stop; default 10; if NULL then running function to last page
init.df = "offers", ## Declare data frame you have if you want add info about new offers to it
output.name = "offers2", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 2 ## How many times the function has to be restarted
)
exists( x = "offers2", envir = globalenv() )
## offer.type = c("a", "n", "u")
### "a" - all (https://www.otomoto.pl/osobowe/) ;
### "n" - new (https://www.otomoto.pl/osobowe/uzywane/) ;
### "u" - used (https://www.otomoto.pl/osobowe/nowe/)
getOffersInfo <- function(offer.type = "a", startPageNr = 1, stopPageNr = 10, init.df = NULL, output.name = "offers", sleep = 10, timeout = 4000000)
{
loadPackages(pckgs = c("tidyverse", "xml2"))
options(stringsAsFactors = FALSE, timeout = timeout)
offersInfoOutput <- defineInitialDataFrameWithOfferInfo(initDF = init.df)
checkInputAndOutputDependencies(init.df = init.df, output.df = output.name)
# assign(x = "metaData", value = list(pageNumber = startPageNr, ifFirstRun = FALSE), envir = globalenv())
url.core <- defineURLcore(offerType = offer.type)
URL.suffix <- "?page="
pageNumber <- startPageNr
boardURL <- paste0(url.core, URL.suffix, pageNumber)
boardPage <- goToPage(URL = boardURL, timeout = timeout); Sys.sleep(sleep)
numberOfPagesToScraping <- defineNumberOfPagesToScraping(board.page = boardPage, last.page = stopPageNr, timeout = timeout)
## ----------------------------------------------------------
for( pageNumber in startPageNr:numberOfPagesToScraping )
{
cat(paste0("Start to read board no. ", pageNumber, ":\n"))
assign(x = "metaData", value = list(pageNumber = pageNumber, ifFirstRun = FALSE), envir = globalenv())
boardURL <- paste0(url.core, URL.suffix, pageNumber)
boardPage <- goToPage(URL = boardURL, timeout = timeout)
newOffers <- getOffersInfoFromSingleBoard(page = boardPage, offersTable = offersInfoOutput, sleep = sleep, timeout = timeout)
offersInfoOutput <- rbind(offersInfoOutput, newOffers)
assign(x = output.name, value = offersInfoOutput, envir = globalenv())
}
## ----------------------------------------------------------
return(offersInfoOutput)
}
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 3, ## Page number to stop; default 10; if NULL then running function to last page
init.df = "offers", ## Declare data frame you have if you want add info about new offers to it
output.name = "offers2", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 1 ## How many times the function has to be restarted
)
nrow(offers)
length(unique(offers$Id))
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 3, ## Page number to stop; default 10; if NULL then running function to last page
init.df = "offers", ## Declare data frame you have if you want add info about new offers to it
output.name = "offers2", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 1 ## How many times the function has to be restarted
)
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 3, ## Page number to stop; default 10; if NULL then running function to last page
init.df = "offers", ## Declare data frame you have if you want add info about new offers to it
output.name = "offers2", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 2 ## How many times the function has to be restarted
)
nrow(offers)
length(unique(offers$Id))
## offer.type = c("a", "n", "u")
### "a" - all (https://www.otomoto.pl/osobowe/) ;
### "n" - new (https://www.otomoto.pl/osobowe/uzywane/) ;
### "u" - used (https://www.otomoto.pl/osobowe/nowe/)
getOffersInfo <- function(offer.type = "a", startPageNr = 1, stopPageNr = 10, init.df = NULL, output.name = "offers", sleep = 10, timeout = 4000000)
{
loadPackages(pckgs = c("tidyverse", "xml2"))
options(stringsAsFactors = FALSE, timeout = timeout)
offersInfoOutput <- defineInitialDataFrameWithOfferInfo(initDF = init.df)
print(nrow(offersInfoOutput))
checkInputAndOutputDependencies(init.df = init.df, output.df = output.name)
# assign(x = "metaData", value = list(pageNumber = startPageNr, ifFirstRun = FALSE), envir = globalenv())
url.core <- defineURLcore(offerType = offer.type)
URL.suffix <- "?page="
pageNumber <- startPageNr
boardURL <- paste0(url.core, URL.suffix, pageNumber)
boardPage <- goToPage(URL = boardURL, timeout = timeout); Sys.sleep(sleep)
numberOfPagesToScraping <- defineNumberOfPagesToScraping(board.page = boardPage, last.page = stopPageNr, timeout = timeout)
## ----------------------------------------------------------
for( pageNumber in startPageNr:numberOfPagesToScraping )
{
cat(paste0("Start to read board no. ", pageNumber, ":\n"))
assign(x = "metaData", value = list(pageNumber = pageNumber, ifFirstRun = FALSE), envir = globalenv())
boardURL <- paste0(url.core, URL.suffix, pageNumber)
boardPage <- goToPage(URL = boardURL, timeout = timeout); Sys.sleep(sleep)
newOffers <- getOffersInfoFromSingleBoard(page = boardPage, offersTable = offersInfoOutput, sleep = sleep, timeout = timeout)
offersInfoOutput <- rbind(offersInfoOutput, newOffers)
print(nrow(offersInfoOutput))
assign(x = output.name, value = offersInfoOutput, envir = globalenv())
}
## ----------------------------------------------------------
return(offersInfoOutput)
}
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 3, ## Page number to stop; default 10; if NULL then running function to last page
init.df = "offers", ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers2", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 2 ## How many times the function has to be restarted
)
head(get("offers", envir = globalenv()))
defineInitialDataFrameWithOfferInfo <- function(initDF)
{
if( is.null(initDF))
{
initDF <- data.frame(
Id = character(0),
Label = character(0),
Value = character(0)
)
message("Run function without initial data frame.")
}
else if( !exists( x = initDF, envir = globalenv() ) )
{
stop("The declared init data frame is not avaiable in global environment.")
}
else
{
initDF <- get(x = initDF, envir = globalenv() )
message("Run function with initial data frame.")
}
return(initDF)
}
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 3, ## Page number to stop; default 10; if NULL then running function to last page
init.df = "offers", ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers2", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 2 ## How many times the function has to be restarted
)
y
y
yy
y
y
y
yy
y
y
y
yy
n
n
version
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 3, ## Page number to stop; default 10; if NULL then running function to last page
init.df = NULL, ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers2", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 2 ## How many times the function has to be restarted
)
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 15, ## Page number to stop; default 10; if NULL then running function to last page
init.df = NULL, ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers2", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 2 ## How many times the function has to be restarted
)
NA %in% c("a", "b")
yesOrNoQuestion <- function(question)
{
answer <- NA
while(!(answer %in% c("y", "Y", "yes", "Yes", "YES", "n", "N", "no", "No", "NO")))
{
answer <- readline(prompt = question)
if( !(answer %in% c("y", "Y", "yes", "Yes", "YES", "n", "N", "no", "No", "NO")) )
{
message("Please answer yes (y) or no (n).")
}
}
answer.logical <- ifelse(answer %in% c("y", "Y", "yes", "Yes", "YES"), TRUE, FALSE)
return(answer.logical)
}
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 15, ## Page number to stop; default 10; if NULL then running function to last page
init.df = NULL, ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers2", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 2 ## How many times the function has to be restarted
)
getOffersInfo_avoidErr <- function(offer.type = "a", startPageNr = 1, stopPageNr = 10, init.df = NULL, output.name = "offers", sleep = 10, timeout = 4000000, n_iter = 100)
{
## Assign values for first loop requirement
assign(x = "metaData", value = list(pageNumber = startPageNr, ifFirstRun = TRUE), envir = globalenv())
for(i in seq_len(n_iter))
{
tryCatch(
expr = {
getOffersInfo(
offer.type = offer.type, ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = globalenv()$metaData$pageNumber, ## Page number to start; default 1
stopPageNr = stopPageNr, ## Page number to stop; default 10; if NULL then running function to last page
init.df = ifelse2(globalenv()$metaData$pageNumber > startPageNr, output.name, init.df), ## Declare data frame you have if you want add info about new offers to it
output.name = output.name, ## An output data frame name. Function create date frame with that name; default "offers"
sleep = sleep, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = timeout ## Time required to interrupt the connection. Too low value should cause errors.
)
},
error = function(e)
{
message(paste0("An error has occured. ", e))
}
)
}
return(invisible())
}
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 15, ## Page number to stop; default 10; if NULL then running function to last page
init.df = NULL, ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers2", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 2 ## How many times the function has to be restarted
)
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 15, ## Page number to stop; default 10; if NULL then running function to last page
init.df = NULL, ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers2", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 2 ## How many times the function has to be restarted
)
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 15, ## Page number to stop; default 10; if NULL then running function to last page
init.df = "offers2", ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 2 ## How many times the function has to be restarted
)
getOffersInfo_avoidErr <- function(offer.type = "a", startPageNr = 1, stopPageNr = 10, init.df = NULL, output.name = "offers", sleep = 10, timeout = 4000000, n_iter = 100)
{
## Assign values for first loop requirement
assign(x = "metaData", value = list(pageNumber = startPageNr, ifFirstRun = TRUE), envir = globalenv())
for(i in seq_len(n_iter))
{
tryCatch(
expr = {
getOffersInfo(
offer.type = offer.type, ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = globalenv()$metaData$pageNumber, ## Page number to start; default 1
stopPageNr = stopPageNr, ## Page number to stop; default 10; if NULL then running function to last page
init.df = ifelse2(globalenv()$metaData$pageNumber > startPageNr, output.name, init.df), ## Declare data frame you have if you want add info about new offers to it
output.name = output.name, ## An output data frame name. Function create date frame with that name; default "offers"
sleep = sleep, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = timeout ## Time required to interrupt the connection. Too low value should cause errors.
)
},
error = function(e)
{
message(paste0("An ",i ,". error has occured. ", e))
}
)
}
return(invisible())
}
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 15, ## Page number to stop; default 10; if NULL then running function to last page
init.df = "offers", ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 2 ## How many times the function has to be restarted
)
save(offers, file = "./data/offers.RData")
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 15, ## Page number to stop; default 10; if NULL then running function to last page
init.df = NULL, ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 2 ## How many times the function has to be restarted
)
load("data/offers.RData")
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 15, ## Page number to stop; default 10; if NULL then running function to last page
init.df = "offers", ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 2 ## How many times the function has to be restarted
)
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 100, ## Page number to stop; default 10; if NULL then running function to last page
init.df = "offers", ## Declare data frame name you have if you want add info about new offers to it
output.name = "offers", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 200 ## How many times the function has to be restarted
)
nrow(offers)
length(unique(offers$Id))
save(offers, file = "./data/offers.RData")
