offerPriceAll <- c(Value = offerPriceNumber, Currency = offerPriceCurrency, Details = offerPriceDetails)
return(offerPriceAll)
}
x <- getOfferPrice(p)
getOfferPrice <- function(page)
{
offerPriceNumber <- page %>%
rvest::html_node(xpath = "//section[@class='offer-header']/div[@class='offer-header__row']/div[@class='offer-price']/span[@class='offer-price__number']") %>%
rvest::html_text() %>%
gsub(pattern = "[^0-9.]", replacement = "", x = .)
offerPriceCurrency <- page %>%
rvest::html_node(xpath = "//section[@class='offer-header']/div[@class='offer-header__row']/div[@class='offer-price']/span[@class='offer-price__number']/span[@class='offer-price__currency']") %>%
rvest::html_text()
offerPriceDetails <- page %>%
rvest::html_node(xpath = "//section[@class='offer-header']/div[@class='offer-header__row']/div[@class='offer-price']/span[@class='offer-price__details']") %>%
rvest::html_text()
offerPriceAll <- c(Value = offerPriceNumber, Currency = offerPriceCurrency, Details = offerPriceDetails)
return(offerPriceAll)
}
x <- getOfferPrice(p)
getOfferPrice <- function(page)
{
offerPriceNumber <- page %>%
rvest::html_node(xpath = "//section[@class='offer-header']/div[@class='offer-header__row']/div[@class='offer-price']/span[@class='offer-price__number']") %>%
rvest::html_text() %>%
gsub(pattern = "[^0-9.]", replacement = "", x = .)
offerPriceCurrency <- page %>%
rvest::html_node(xpath = "//section[@class='offer-header']/div[@class='offer-header__row']/div[@class='offer-price']/span[@class='offer-price__number']/span[@class='offer-price__currency']") %>%
rvest::html_text()
offerPriceDetails <- page %>%
rvest::html_node(xpath = "//section[@class='offer-header']/div[@class='offer-header__row']/div[@class='offer-price']/span[@class='offer-price__details']") %>%
rvest::html_text() %>%
strsplit(split = ", ") %>%
unlist() %>%
unname()
offerPriceAll <- c(Value = offerPriceNumber, Currency = offerPriceCurrency, Details = offerPriceDetails)
return(offerPriceAll)
}
x <- getOfferPrice(p)
p <- xml2::read_html("https://www.otomoto.pl/oferta/ford-fusion-swiezo-sprowadzony-i-wlasciciel-bezwypadkowy-po-oplatach-ID6Aw7E3.html#3471ec01f4")
x <- getOfferPrice(p)
x
version
funList <- list.files("./functions/codes/")
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(funList)
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
options(stringsAsFactors = FALSE)
library(tidyverse)
library(xml2)
URL.core <- "https://www.otomoto.pl/osobowe/uzywane/"
URL.suffix <- "?page="
pageNumber <- 1
URL <- paste0(URL.core, URL.suffix, pageNumber)
offer.URLs <- xml2::read_html(URL) %>%
rvest::html_nodes(xpath = "//div/h2/a[@class='offer-title__link']") %>%
rvest::html_attr(name = "href")
offer.URL <- offer.URLs[20]
offer.URL <- "https://www.otomoto.pl/oferta/mercedes-benz-w124-1984-1993-coupe-300ce-ID6AmpFl.html#3471ec01f4"
p <- xml2::read_html(offer.URL)
rm(p)
offer.id <- xml2::read_html(offer.URL) %>%
rvest::html_nodes(xpath = "//div[@class='offer-content__metabar']/div[@class='offer-meta']/span[@class='offer-meta__item']/span[@class='offer-meta__value']") %>%
rvest::html_text()
offer.id
paste0("A", offer.id)
stop("A", offer.id)
stop("A ", offer.id)
stop("A\n", offer.id)
as.numeric("A2")
as.Date("A")
as.Date("3012-02-40")
as.Date("3012-02-14")
grepl(pattern = "^\\d{4}\\-\\d{2}\\-\\d{2}$", x = "2018-03-02")
grepl(pattern = "^\\d{4}\\-\\d{2}\\-\\d{2}$", x = "2018-03-022")
grepl(pattern = "^\\d{4}\\-\\d{2}\\-\\d{2}$", x = "2018-0l-022")
checkCorrectnessOfOfferId <- function(offerId)
{
if(!is.vector(offerId) || length(offerId) != 2)
{
stop("Offer ID object is not a vector class of length 2.The object looks like:\n")
}
suppressWarnings({numericOfferId <- as.numeric(offerId[2])})
if(is.na(numericOfferId))
{
stop("Offer ID object contains non-numerical values. The original value of offer ID looks like:\n", offerId)
}
if(!grepl(pattern = "^\\d{4}\\-\\d{2}\\-\\d{2}$", x = offerId[1]))
{
stop("Offer date has wrong format:\n", offerId[1])
}
return(invisible())
}
cat("A", "\nB")
getSingleOffer <- function(URL, sleep = 10L)
{
cat("Start to read offer from web adress:", URL)
offerPage <- goToPage(URL = URL)
offerId <-              getOfferId(page = offerPage)
offerPrice <-           getOfferPrice(page = offerPage)
offerParametersTable <- getOfferParamTable(page = offerPage)
offerParameterLabels <- getOfferParamLabels(paramElement = offerParametersTable)
offerParameterValues <- getOfferParamValues(paramElement = offerParametersTable)
offerEquipment <-       getOfferEquipmentLabels(page = offerPage)
offerDescription <-     getOfferDescription(page = offerPage)
checkCorrectnessOfOfferValues(offerId = offerId,
offerPrice = offerPrice,
paramLabels = offerParameterLabels,
paramValues = offerParameterValues,
equipmentLabels = offerEquipment,
description = offerDescription)
tableWithOfferVales <- mergeOfferValues(offerId = offerId,
offerPrice = offerPrice,
paramLabels = offerParameterLabels,
paramValues = offerParameterValues,
equipmentLabels = offerEquipment,
description = offerDescription)
Sys.sleep(sleep)
return(tableWithOfferVales)
}
p <- xml2::read_html(offer.URL)
x <- getOfferPrice(p)
x
checkCorrectnessOfOfferPrice <- function(offerPrice)
{
if(!is.vector(offerId) || length(offerId) < 3)
{
stop("Offer ID object is not a vector class of minimum length 3. The object looks like:\n", offerPrice)
}
numericPrice <- as.numeric(offerPrice[1])
if(is.na(numericPrice))
{
stop("Offer price is non-numeric type. The price looks like:\n", offerPrice[1])
}
return(invisible())
}
parameters.table <- xml2::read_html(offer.URL) %>%
rvest::html_node(xpath = "//div[@id='parameters']")
labels <- parameters.table %>%
rvest::html_nodes(xpath = "//ul/li/span[@class='offer-params__label']") %>%
rvest::html_text() %>%
gsub(pattern = " ", replacement = ".", x = .)
values <- parameters.table %>%
rvest::html_nodes(xpath = "//ul/li/div[@class='offer-params__value']") %>%
rvest::html_text() %>%
gsub(pattern = "\\s{2,}", replacement = "", x = .)
labels
values
checkCorrectnessOfParamLabelsAndValues <- function(labels, values)
{
if(!is.vector(labels) || !is.character(labels))
{
stop("Parameter labels object is not a character vector. The object looks like:\n", labels)
}
if(!is.vector(values) || !is.character(values))
{
stop("Parameter values object is not a character vector. The object looks like:\n", values)
}
if(length(labels) != length(values))
{
stop("Parameter labels and parameters values do not have equal length. \nThe legth of labels: ", length(labels), "\nThe length of values: ", length(values))
}
return(invisible())
}
equipment <- xml2::read_html(offer.URL) %>%
rvest::html_nodes(xpath = "//div[@class='offer-features__row']/ul[@class='offer-features__list']/li[@class='offer-features__item']") %>%
rvest::html_text() %>%
gsub(pattern = "\\s{2,}", replacement = "", x = .)
equipment
offer.URL <- offer.URLs[20]
equipment <- xml2::read_html(offer.URL) %>%
rvest::html_nodes(xpath = "//div[@class='offer-features__row']/ul[@class='offer-features__list']/li[@class='offer-features__item']") %>%
rvest::html_text() %>%
gsub(pattern = "\\s{2,}", replacement = "", x = .)
equipment
is.vector(character(0))
is.character(character(0))
checkCorrectnessOfEquipmentLabels <- function(equipment)
{
if(!is.vector(equipment) || !is.character(equipment))
{
stop("Equipment object is not a character vector. The object looks like:\n", equipment)
}
return(invisible())
}
length(character(0))
checkCorrectnessOfDescription <- function(description)
{
if(!is.vector(description) || length(description) > 1 || !is.character(description))
{
stop("Offer description is not a character vector of length 1. The object looks like:\n", description)
}
return(invisible())
}
l <- p %>%
rvest::html_node(xpath = "//div[@class='offer-content__aside']/div[@class='seller-box']/div[@class='seller-box__seller-address']/span[@class='seller-box__seller-address__label']")
l <- p %>%
rvest::html_node(xpath = "//div[@class='offer-content__aside']/div[@class='seller-box']/div[@class='seller-box__seller-address']/span[@class='seller-box__seller-address__label']") %>%
rvest::html_text()
l
l <- p %>%
rvest::html_node(xpath = "//div[@class='offer-content__aside']/div[@class='seller-box']/div[@class='seller-box__seller-address']/span[@class='seller-box__seller-address__label']") %>%
rvest::html_text() %>%
gsub(pattern = "\\s{2,}", replacement = "", x = .)
l
vendor <- p %>%
rvest::html_node(xpath = "//div[@class='offer-content__aside']/div[@class='seller-box']/div[@class='seller-box__seller-info']/small[@class='seller-box__seller-type']") %>%
rvest::html_text()
vendor
## forma prawna sprzedawcy
vendor <- p %>%
rvest::html_node(xpath = "//div[@class='offer-content__aside']/div[@class='seller-box']/div[@class='seller-box__seller-info']/small[@class='seller-box__seller-type']") %>%
rvest::html_text() %>%
gsub(pattern = "\\s{2,}", replacement = "", x = .)
vendor
getDealerLoacation <- function(page)
{
location <- page %>%
rvest::html_node(xpath = "//div[@class='offer-content__aside']/div[@class='seller-box']/div[@class='seller-box__seller-address']/span[@class='seller-box__seller-address__label']") %>%
rvest::html_text() %>%
gsub(pattern = "\\s{2,}", replacement = "", x = .)
return(location)
}
getDealerType <- function(page)
{
dealer <- page %>%
rvest::html_node(xpath = "//div[@class='offer-content__aside']/div[@class='seller-box']/div[@class='seller-box__seller-info']/small[@class='seller-box__seller-type']") %>%
rvest::html_text() %>%
gsub(pattern = "\\s{2,}", replacement = "", x = .)
return(dealer)
}
l
vendor
checkCorrectnessOfDealerType <- function(dealerType)
{
if(!is.vector(dealerType) || length(dealerType) != 1 || !is.character(dealerType))
{
stop("Offer dealerType is not a character vector of length 1. The object looks like:\n", dealerType)
}
return(invisible())
}
checkCorrectnessOfDealerLocation <- function(dealerLocation)
{
if(!is.vector(dealerLocation) || length(dealerLocation) != 1 || !is.character(dealerLocation))
{
stop("Offer dealerLocation is not a character vector of length 1. The object looks like:\n", dealerLocation)
}
return(invisible())
}
## Połączenie informacji:
offer.id
length(labels)==length(values)
labels
values
equipment
description
description <- xml2::read_html(offer.URL) %>%
rvest::html_nodes(xpath = "//div[@id='description']/div") %>%
rvest::html_text() %>%
gsub(pattern = "\\n", replacement = "", x = .) %>%
gsub(pattern = "\\r", replacement = "", x = .) %>%
gsub(pattern = "\\\"", replacement = "'", x = .) %>%
gsub(pattern = "^\\s{2,}", replacement = "", x = .) %>%
gsub(pattern = "\\s{2,}$", replacement = "", x = .) %>%
gsub(pattern = "\\s{2,}", replacement = " ", x = .)
description
offer.URL
description <- xml2::read_html(offer.URL) %>%
rvest::html_nodes(xpath = "//div[@id='description']/div") %>%
rvest::html_text() %>%
gsub(pattern = "\\n", replacement = "", x = .) %>%
gsub(pattern = "\\r", replacement = "", x = .) %>%
gsub(pattern = "\\t", replacement = "", x = .) %>%
gsub(pattern = "\\\"", replacement = "'", x = .) %>%
gsub(pattern = "^\\s{2,}", replacement = "", x = .) %>%
gsub(pattern = "\\s{2,}$", replacement = "", x = .) %>%
gsub(pattern = "\\s{2,}", replacement = " ", x = .)
description
x
## Połączenie informacji:
offer.id
length(labels)==length(values)
x
l
vendor
labels
values
equipment
description
x
n <- length(labels) + length(equipment) + length(c(description, offer.id[1], vendor, l, x))
n_equipment <- length(equipment)
one.offer <- data.frame(
Id = rep(offer.id[2], n),
Label = c(labels, equipment, "Opis", "Data.oferty", "Sprzedawca", "Lokalizacja", names(x)),
Value = c(values, rep(1, n_equipment), description, offer.id[1], vendor, l, x)
)
one.offer
View(one.offer)
getOfferPrice <- function(page)
{
offerPriceNumber <- page %>%
rvest::html_node(xpath = "//section[@class='offer-header']/div[@class='offer-header__row']/div[@class='offer-price']/span[@class='offer-price__number']") %>%
rvest::html_text() %>%
gsub(pattern = "[^0-9.]", replacement = "", x = .)
offerPriceCurrency <- page %>%
rvest::html_node(xpath = "//section[@class='offer-header']/div[@class='offer-header__row']/div[@class='offer-price']/span[@class='offer-price__number']/span[@class='offer-price__currency']") %>%
rvest::html_text()
offerPriceDetails <- page %>%
rvest::html_node(xpath = "//section[@class='offer-header']/div[@class='offer-header__row']/div[@class='offer-price']/span[@class='offer-price__details']") %>%
rvest::html_text() %>%
strsplit(split = ", ") %>%
unlist() %>%
unname()
offerPriceAll <- c(Cena = offerPriceNumber, Waluta = offerPriceCurrency, Detal = offerPriceDetails)
return(offerPriceAll)
}
mergeOfferValues <-
function(
offerId,
offerPrice,
dealerType,
dealerLocation,
paramLabels,
paramValues,
equipmentLabels,
description
)
{
noOfRows <- length(paramLabels) + length(equipmentLabels) + length(c(description, offerId[1], dealerType, dealerLocation, offerPrice))
noOfEquipmentRows <- length(equipmentLabels)
singleOfferTable <- data.frame(
Id = rep(offerId[2], noOfRows),
Label = c(paramLabels, equipmentLabels, "Opis", "Data.oferty", "Sprzedawca", "Lokalizacja", names(offerPrice)),
Value = c(paramValues, rep(1, noOfEquipmentRows), description, offerId[1], dealerType, dealerLocation, offerPrice)
)
return(singleOfferTable)
}
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
url <- "https://www.otomoto.pl/oferta/mercedes-benz-w124-1984-1993-coupe-300ce-ID6AmpFl.html#3471ec01f4"
so <- getSingleOffer(URL = url, sleep = 0)
offerDate <- "17:52, 26 lipca 2018"
excludedTime <- gsub(pattern = "^.+, ", replacement = "", x = offerDate)
excludedTime
Sys.Date()
format(Sys.Date(), format = "%Y-%b-%d")
format(Sys.Date(), format = "%Y-%B-%d")
monthNames <- c("Stycznia", "Lutego", "Marca", "Kwietnia", "Maja", "Czerwca", "Lipca", "Sierpnia", "Września", "Października", "Listopada", "Grudnia")
grepl(pattern = monthNames, x = excludedTime, ignore.case = T)
givenMonthName <- gsub(pattern = "\\s|\\d", replacement = "", x = excludedTime, ignore.case = T)
givenMonthName
monthNames==givenMonthName
monthNames <- c("stycznia", "lutego", "marca", "kwietnia", "maja", "czerwca", "lipca", "sierpnia", "września", "października", "listopada", "grudnia")
monthNames==givenMonthName
ifGivenMonth <- monthNames==givenMonthName
givenMonthNumber <- monthNumbers[ifGivenMonth]
ifGivenMonth <- monthNames==givenMonthName
givenMonthNumber <- monthNumbers[ifGivenMonth]
monthNumbers <- c("01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12")
givenMonthNumber <- monthNumbers[ifGivenMonth]
givenMonthNumber
excludedTime
transformMonthName <- function(date)
{
monthNames <- c("stycznia", "lutego", "marca", "kwietnia", "maja", "czerwca", "lipca", "sierpnia", "września", "października", "listopada", "grudnia")
monthNumbers <- c("01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12")
givenMonthName <- gsub(pattern = "\\s|\\d", replacement = "", x = date, ignore.case = T)
ifGivenMonth <- monthNames==givenMonthName
givenMonthNumber <- monthNumbers[ifGivenMonth]
return(givenMonthNumber)
}
day <- gsub(pattern = " .+ \\d{4}^", replacement = "", x = excludedTime)
day <- gsub(pattern = " \\w+ \\d{4}^", replacement = "", x = excludedTime)
day <- gsub(pattern = " [a-z]+ \\d{4}^", replacement = "", x = excludedTime)
day <- gsub(pattern = " [a-z]+ \\d{4}$", replacement = "", x = excludedTime)
day <- gsub(pattern = " \\w+ \\d{4}$", replacement = "", x = excludedTime)
year <- gsub(pattern = "^\\d+ \\w+ ", replacement = "", x = excludedTime)
excludedTime <- "1 lipca 2018"
day <- gsub(pattern = " \\w+ \\d{4}$", replacement = "", x = excludedTime)
day <- ifelse(nchar(day)==1, paste0("0", day), day)
month <- transformMonthName(date = excludedTime)
year <- gsub(pattern = "^\\d+ \\w+ ", replacement = "", x = excludedTime)
formattedOfferDate <- paste(day, month, year, sep = "-")
as.Date(formattedOfferDate)
formattedOfferDate <- paste(year, month, day, sep = "-")
as.Date(formattedOfferDate)
transformOfferDate <- function(offerDate)
{
excludedTime <- gsub(pattern = "^.+, ", replacement = "", x = offerDate)
day <- gsub(pattern = " \\w+ \\d{4}$", replacement = "", x = excludedTime)
day <- ifelse(nchar(day)==1, paste0("0", day), day)
month <- transformMonthName(date = excludedTime)
year <- gsub(pattern = "^\\d+ \\w+ ", replacement = "", x = excludedTime)
formattedOfferDate <- paste(year, month, day, sep = "-")
return(formattedOfferDate)
}
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
url <- "https://www.otomoto.pl/oferta/mercedes-benz-w124-1984-1993-coupe-300ce-ID6AmpFl.html#3471ec01f4"
so <- getSingleOffer(URL = url, sleep = 0)
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
url <- "https://www.otomoto.pl/oferta/mercedes-benz-w124-1984-1993-coupe-300ce-ID6AmpFl.html#3471ec01f4"
so <- getSingleOffer(URL = url, sleep = 0)
View(so)
data.frame(ąa = 2)
offer.URLs <- xml2::read_html(URL) %>%
rvest::html_nodes(xpath = "//div/h2/a[@class='offer-title__link']") %>%
rvest::html_attr(name = "href")
url <- offer.URLs[runif(1, min = 1, max = 30)]
offer.URLs <- xml2::read_html(URL) %>%
rvest::html_nodes(xpath = "//div/h2/a[@class='offer-title__link']") %>%
rvest::html_attr(name = "href")
URL.core <- "https://www.otomoto.pl/osobowe/uzywane/"
URL.suffix <- "?page="
pageNumber <- 1
URL <- paste0(URL.core, URL.suffix, pageNumber)
offer.URLs <- xml2::read_html(URL) %>%
rvest::html_nodes(xpath = "//div/h2/a[@class='offer-title__link']") %>%
rvest::html_attr(name = "href")
url <- offer.URLs[runif(1, min = 1, max = 30)]
so <- getSingleOffer(URL = url, sleep = 0)
View(so)
getOfferPrice <- function(page)
{
offerPriceNumber <- page %>%
rvest::html_node(xpath = "//section[@class='offer-header']/div[@class='offer-header__row']/div[@class='offer-price']/span[@class='offer-price__number']") %>%
rvest::html_text() %>%
gsub(pattern = "[^0-9.]", replacement = "", x = .)
offerPriceCurrency <- page %>%
rvest::html_node(xpath = "//section[@class='offer-header']/div[@class='offer-header__row']/div[@class='offer-price']/span[@class='offer-price__number']/span[@class='offer-price__currency']") %>%
rvest::html_text()
offerPriceDetails <- page %>%
rvest::html_node(xpath = "//section[@class='offer-header']/div[@class='offer-header__row']/div[@class='offer-price']/span[@class='offer-price__details']") %>%
rvest::html_text() %>%
strsplit(split = ", ") %>%
unlist() %>%
unname()
offerPriceAll <- c(Cena = offerPriceNumber, Waluta = offerPriceCurrency, CenaDodInfo = offerPriceDetails)
return(offerPriceAll)
}
url <- offer.URLs[runif(1, min = 1, max = 30)]
so <- getSingleOffer(URL = url, sleep = 0)
View(so)
url <- offer.URLs[runif(1, min = 1, max = 30)]
so <- getSingleOffer(URL = url, sleep = 0)
View(so)
url <- offer.URLs[runif(1, min = 1, max = 30)]
so <- getSingleOffer(URL = url, sleep = 0)
View(so)
getSingleOffer <- function(URL, sleep = 10L)
{
cat("Read offer from web adress:", URL)
offerPage <- goToPage(URL = URL)
offerId <-              getOfferId(page = offerPage)
offerPrice <-           getOfferPrice(page = offerPage)
dealerType <-           getDealerType(page = offerPage)
dealerLocation <-       getDealerLoacation(page = offerPage)
offerParametersTable <- getOfferParamTable(page = offerPage)
offerParameterLabels <- getOfferParamLabels(paramElement = offerParametersTable)
offerParameterValues <- getOfferParamValues(paramElement = offerParametersTable)
offerEquipment <-       getOfferEquipmentLabels(page = offerPage)
offerDescription <-     getOfferDescription(page = offerPage)
checkCorrectnessOfOfferValues(offerId = offerId,
offerPrice = offerPrice,
dealerType = dealerType,
dealerLocation = dealerLocation,
paramLabels = offerParameterLabels,
paramValues = offerParameterValues,
equipmentLabels = offerEquipment,
description = offerDescription)
tableWithOfferValues <- mergeOfferValues(offerId = offerId,
offerPrice = offerPrice,
dealerType = dealerType,
dealerLocation = dealerLocation,
paramLabels = offerParameterLabels,
paramValues = offerParameterValues,
equipmentLabels = offerEquipment,
description = offerDescription)
Sys.sleep(sleep)
return(tableWithOfferValues)
}
url <- offer.URLs[runif(1, min = 1, max = 30)]
so <- getSingleOffer(URL = url, sleep = 0)
View(so)
url <- offer.URLs[runif(1, min = 1, max = 30)]
so <- getSingleOffer(URL = url, sleep = 0)
View(so)
gc()
gc()
