init.df <- data.frame(
Id = character(0),
Label = character(0),
Value = character(0)
)
}
url.core <- defineURLcore(offer.type = offer.type)
URL.suffix <- "?page="
pageNumber <- 1
return(invisible())
}
getOffersInfo()
## offer.type = c("a", "n", "u")
### "a" - all (https://www.otomoto.pl/osobowe/) ;
### "n" - new (https://www.otomoto.pl/osobowe/uzywane/) ;
### "u" - used (https://www.otomoto.pl/osobowe/nowe/)
getOffersInfo <- function(offer.type = "a", init.df = NULL)
{
loadPackages(pckgs = c("tidyverse", "xml2"))
options(stringsAsFactors = FALSE)
if(is.null(init.df))
{
answer <- readline(prompt = "Are you sure you want run code without init data frame? y/n: ")
if(answer == "n") stop('\r Function was stopped ')
init.df <- data.frame(
Id = character(0),
Label = character(0),
Value = character(0)
)
}
url.core <- defineURLcore(offer.type = offer.type)
URL.suffix <- "?page="
pageNumber <- 1
return(invisible())
}
getOffersInfo()
stop('\r Update DB')
## offer.type = c("a", "n", "u")
### "a" - all (https://www.otomoto.pl/osobowe/) ;
### "n" - new (https://www.otomoto.pl/osobowe/uzywane/) ;
### "u" - used (https://www.otomoto.pl/osobowe/nowe/)
getOffersInfo <- function(offer.type = "a", init.df = NULL)
{
loadPackages(pckgs = c("tidyverse", "xml2"))
options(stringsAsFactors = FALSE)
if(is.null(init.df))
{
answer <- readline(prompt = "Are you sure you want run code without init data frame? y/n: ")
if(answer == "n") stop('\answer Function was stopped ')
init.df <- data.frame(
Id = character(0),
Label = character(0),
Value = character(0)
)
}
url.core <- defineURLcore(offer.type = offer.type)
URL.suffix <- "?page="
pageNumber <- 1
return(invisible())
}
## offer.type = c("a", "n", "u")
### "a" - all (https://www.otomoto.pl/osobowe/) ;
### "n" - new (https://www.otomoto.pl/osobowe/uzywane/) ;
### "u" - used (https://www.otomoto.pl/osobowe/nowe/)
getOffersInfo <- function(offer.type = "a", init.df = NULL)
{
loadPackages(pckgs = c("tidyverse", "xml2"))
options(stringsAsFactors = FALSE)
if(is.null(init.df))
{
answer <- readline(prompt = "Are you sure you want run code without init data frame? (y/n): ")
if(answer == "n") stop('\answer Function was stopped ')
init.df <- data.frame(
Id = character(0),
Label = character(0),
Value = character(0)
)
}
url.core <- defineURLcore(offer.type = offer.type)
URL.suffix <- "?page="
pageNumber <- 1
return(invisible())
}
getOffersInfo()
## offer.type = c("a", "n", "u")
### "a" - all (https://www.otomoto.pl/osobowe/) ;
### "n" - new (https://www.otomoto.pl/osobowe/uzywane/) ;
### "u" - used (https://www.otomoto.pl/osobowe/nowe/)
getOffersInfo <- function(offer.type = "a", init.df = NULL)
{
loadPackages(pckgs = c("tidyverse", "xml2"))
options(stringsAsFactors = FALSE)
if(is.null(init.df))
{
answer <- readline(prompt = "Are you sure you want run code without init data frame? (y/n): ")
if(answer == "n") stop('\r Function was stoppe ')
init.df <- data.frame(
Id = character(0),
Label = character(0),
Value = character(0)
)
}
url.core <- defineURLcore(offer.type = offer.type)
URL.suffix <- "?page="
pageNumber <- 1
return(invisible())
}
getOffersInfo()
## offer.type = c("a", "n", "u")
### "a" - all (https://www.otomoto.pl/osobowe/) ;
### "n" - new (https://www.otomoto.pl/osobowe/uzywane/) ;
### "u" - used (https://www.otomoto.pl/osobowe/nowe/)
getOffersInfo <- function(offer.type = "a", init.df = NULL)
{
loadPackages(pckgs = c("tidyverse", "xml2"))
options(stringsAsFactors = FALSE)
if(is.null(init.df))
{
answer <- readline(prompt = "Are you sure you want run code without init data frame? (y/n): ")
if(answer == "n") stop('\r Function was stopped')
init.df <- data.frame(
Id = character(0),
Label = character(0),
Value = character(0)
)
}
url.core <- defineURLcore(offer.type = offer.type)
URL.suffix <- "?page="
pageNumber <- 1
return(invisible())
}
getOffersInfo()
## offer.type = c("a", "n", "u")
### "a" - all (https://www.otomoto.pl/osobowe/) ;
### "n" - new (https://www.otomoto.pl/osobowe/uzywane/) ;
### "u" - used (https://www.otomoto.pl/osobowe/nowe/)
getOffersInfo <- function(offer.type = "a", init.df = NULL)
{
loadPackages(pckgs = c("tidyverse", "xml2"))
options(stringsAsFactors = FALSE)
if(is.null(init.df))
{
answer <- readline(prompt = "Are you sure you want run code without init data frame? (y/n): ")
if(answer == "n") stop('\\r Function was stopped')
init.df <- data.frame(
Id = character(0),
Label = character(0),
Value = character(0)
)
}
url.core <- defineURLcore(offer.type = offer.type)
URL.suffix <- "?page="
pageNumber <- 1
return(invisible())
}
getOffersInfo()
## offer.type = c("a", "n", "u")
### "a" - all (https://www.otomoto.pl/osobowe/) ;
### "n" - new (https://www.otomoto.pl/osobowe/uzywane/) ;
### "u" - used (https://www.otomoto.pl/osobowe/nowe/)
getOffersInfo <- function(offer.type = "a", init.df = NULL)
{
loadPackages(pckgs = c("tidyverse", "xml2"))
options(stringsAsFactors = FALSE)
if(is.null(init.df))
{
answer <- readline(prompt = "Are you sure you want run code without init data frame? (y/n): ")
if(answer == "n") stop('\r Function STOPPED')
init.df <- data.frame(
Id = character(0),
Label = character(0),
Value = character(0)
)
}
url.core <- defineURLcore(offer.type = offer.type)
URL.suffix <- "?page="
pageNumber <- 1
return(invisible())
}
getOffersInfo()
## offer.type = c("a", "n", "u")
### "a" - all (https://www.otomoto.pl/osobowe/) ;
### "n" - new (https://www.otomoto.pl/osobowe/uzywane/) ;
### "u" - used (https://www.otomoto.pl/osobowe/nowe/)
getOffersInfo <- function(offer.type = "a", init.df = NULL)
{
loadPackages(pckgs = c("tidyverse", "xml2"))
options(stringsAsFactors = FALSE)
if(is.null(init.df))
{
answer <- readline(prompt = "Are you sure you want run code without init data frame? (y/n): ")
if(answer == "n") stop("\r Function has been stopped")
init.df <- data.frame(
Id = character(0),
Label = character(0),
Value = character(0)
)
}
url.core <- defineURLcore(offer.type = offer.type)
URL.suffix <- "?page="
pageNumber <- 1
return(invisible())
}
getOffersInfo()
message("A")
class(T)
yesOrNoQuestion <- function(question)
{
answer <- readline(prompt = question)
while(!(answer %in% c("y", "Y", "yes", "Yes", "YES", "n", "N", "no", "No", "NO")))
{
message("Please answer yes (y) or no (n).")
}
answer.logical <- ifelse(answer %in% c("y", "Y", "yes", "Yes", "YES"), TRUE, FALSE)
return(answer.logical)
}
offer.URL <- offer.URLs[20]
offer.id <- xml2::read_html(offer.URL) %>%
rvest::html_nodes(xpath = "//div[@class='offer-content__metabar']/div[@class='offer-meta']/span[@class='offer-meta__item']/span[@class='offer-meta__value']") %>%
rvest::html_text()
offer.id
offer.URLs <- xml2::read_html(URL) %>%
rvest::html_nodes(xpath = "//div/h2/a[@class='offer-title__link']"
getOfferURLs <- function(page)
{
offer.URLs <- tag %>%
rvest::html_attr(name = "href")
return(offer.URLs)
}
getOfferURLs <- function(tag)
{
offer.URLs <- tag %>%
rvest::html_attr(name = "href")
return(offer.URLs)
}
getOfferURLs <- function(tags)
{
offer.URLs <- tags %>%
rvest::html_attr(name = "href")
return(offer.URLs)
}
getOfferIdsFromBoard <- function(tags)
{
offer.ids <- tags %>%
rvest::html_attr(name = "data-ad-id")
return(offer.ids)
}
## offer.type = c("a", "n", "u")
### "a" - all (https://www.otomoto.pl/osobowe/) ;
### "n" - new (https://www.otomoto.pl/osobowe/uzywane/) ;
### "u" - used (https://www.otomoto.pl/osobowe/nowe/)
getOffersInfo <- function(offer.type = "a", startPageNr = 1, stopPageNr = NULL, init.df = NULL, output.name = "offerInformation")
{
loadPackages(pckgs = c("tidyverse", "xml2"))
options(stringsAsFactors = FALSE)
df <- defineInitialDataFrameWithOfferInfo(init.df = init.df)
url.core <- defineURLcore(offer.type = offer.type)
URL.suffix <- "?page="
pageNumber <- 1
boardURL <- paste0(core, suffix, number)
offersTags <- getOfferTags(URL = boardURL)
offerIds <- getOfferIdsFromBoard(tags)
offerURLs <- getOfferURLsFromBoard(tags)
res <- list(ids = offerIds, urls = offerURLs)
return(res)
}
getOffersInfo()
defineInitialDataFrameWithOfferInfo <- function(init.df)
{
if(is.null(init.df))
{
answer <- yesOrNoQuestion(question = "Are you sure to run function without initial data frame? (y/n): ")
if(!answer) stop("\r Function has been stopped by user.")
init.df <- data.frame(
Id = character(0),
Label = character(0),
Value = character(0)
)
}
else
{
message("Run function with initial data frame.")
}
return(init.df)
}
getOffersInfo()
## offer.type = c("a", "n", "u")
### "a" - all (https://www.otomoto.pl/osobowe/) ;
### "n" - new (https://www.otomoto.pl/osobowe/uzywane/) ;
### "u" - used (https://www.otomoto.pl/osobowe/nowe/)
defineURLcore <- function(offerType)
{
if(offerType=="a")
{
url <- "https://www.otomoto.pl/osobowe/"
}
else if(offerType=="n")
{
url <- "https://www.otomoto.pl/osobowe/uzywane/"
}
else if(offerType=="u")
{
url <- "https://www.otomoto.pl/osobowe/nowe/"
}
else
{
stop("Incorect value of offer type argument. Should be one of c('a', 'n', 'u') ")
}
return(url)
}
getOffersInfo()
## offer.type = c("a", "n", "u")
### "a" - all (https://www.otomoto.pl/osobowe/) ;
### "n" - new (https://www.otomoto.pl/osobowe/uzywane/) ;
### "u" - used (https://www.otomoto.pl/osobowe/nowe/)
getOffersInfo <- function(offer.type = "a", startPageNr = 1, stopPageNr = NULL, init.df = NULL, output.name = "offerInformation")
{
loadPackages(pckgs = c("tidyverse", "xml2"))
options(stringsAsFactors = FALSE)
df <- defineInitialDataFrameWithOfferInfo(init.df = init.df)
url.core <- defineURLcore(offerType = offer.type)
URL.suffix <- "?page="
pageNumber <- 1
boardURL <- paste0(core, suffix, number)
offersTags <- getOfferTags(URL = boardURL)
offerIds <- getOfferIdsFromBoard(tags)
offerURLs <- getOfferURLsFromBoard(tags)
res <- list(ids = offerIds, urls = offerURLs)
return(res)
}
getOffersInfo()
## offer.type = c("a", "n", "u")
### "a" - all (https://www.otomoto.pl/osobowe/) ;
### "n" - new (https://www.otomoto.pl/osobowe/uzywane/) ;
### "u" - used (https://www.otomoto.pl/osobowe/nowe/)
getOffersInfo <- function(offer.type = "a", startPageNr = 1, stopPageNr = NULL, init.df = NULL, output.name = "offerInformation")
{
loadPackages(pckgs = c("tidyverse", "xml2"))
options(stringsAsFactors = FALSE)
df <- defineInitialDataFrameWithOfferInfo(init.df = init.df)
url.core <- defineURLcore(offerType = offer.type)
URL.suffix <- "?page="
pageNumber <- 1
boardURL <- paste0(url.core, URL.suffix, pageNumber)
offersTags <- getOfferTags(URL = boardURL)
offerIds <- getOfferIdsFromBoard(tags)
offerURLs <- getOfferURLsFromBoard(tags)
res <- list(ids = offerIds, urls = offerURLs)
return(res)
}
getOffersInfo()
getOfferTags <- function(URL)
{
offers <- xml2::read_html(URL) %>%
rvest::html_nodes(xpath = "//div/h2/a[@class='offer-title__link']")
return(offers)
}
x <- getOffersInfo()
## offer.type = c("a", "n", "u")
### "a" - all (https://www.otomoto.pl/osobowe/) ;
### "n" - new (https://www.otomoto.pl/osobowe/uzywane/) ;
### "u" - used (https://www.otomoto.pl/osobowe/nowe/)
getOffersInfo <- function(offer.type = "a", startPageNr = 1, stopPageNr = NULL, init.df = NULL, output.name = "offerInformation")
{
loadPackages(pckgs = c("tidyverse", "xml2"))
options(stringsAsFactors = FALSE)
df <- defineInitialDataFrameWithOfferInfo(init.df = init.df)
url.core <- defineURLcore(offerType = offer.type)
URL.suffix <- "?page="
pageNumber <- 1
boardURL <- paste0(url.core, URL.suffix, pageNumber)
offersTags <- getOfferTags(URL = boardURL)
offerIds <- getOfferIdsFromBoard(tags=offersTags)
offerURLs <- getOfferURLsFromBoard(tags=offersTags)
res <- list(ids = offerIds, urls = offerURLs)
return(res)
}
x <- getOffersInfo()
getOfferURLsFromBoard <- function(tags)
{
offer.URLs <- tags %>%
rvest::html_attr(name = "href")
return(offer.URLs)
}
x <- getOffersInfo()
x1 <- x[1]
x2 <- x[2]
names(so)
checkIfUniqueOffer <- function(newIds = offerIds, alreadyScrapedIds = df$Id)
{
ifUniqueId <- newId %in% alreadyScrapedIds
return(ifUniqueId)
}
## offer.type = c("a", "n", "u")
### "a" - all (https://www.otomoto.pl/osobowe/) ;
### "n" - new (https://www.otomoto.pl/osobowe/uzywane/) ;
### "u" - used (https://www.otomoto.pl/osobowe/nowe/)
getOffersInfo <- function(offer.type = "a", startPageNr = 1, stopPageNr = NULL, init.df = NULL, output.name = "offerInformation", sleep = 10)
{
loadPackages(pckgs = c("tidyverse", "xml2"))
options(stringsAsFactors = FALSE)
df <- defineInitialDataFrameWithOfferInfo(init.df = init.df)
url.core <- defineURLcore(offerType = offer.type)
URL.suffix <- "?page="
pageNumber <- 1
boardURL <- paste0(url.core, URL.suffix, pageNumber)
offersTags <- getOfferTags(URL = boardURL)
offerIds <- getOfferIdsFromBoard(tags=offersTags)
offerURLs <- getOfferURLsFromBoard(tags=offersTags)
ifUniqueOffer <- checkIfUniqueOffer(newIds = offerIds, alreadyScrapedIds = df$Id)
newOfferURLs <- offerURLs[ifUniqueOffer]
for(url in newOfferURLs)
{
singleOfferValues <- getSingleOffer(URL = url, sleep = sleep)
df <- rbind(df, singleOfferValues)
}
return(df)
}
## offer.type = c("a", "n", "u")
### "a" - all (https://www.otomoto.pl/osobowe/) ;
### "n" - new (https://www.otomoto.pl/osobowe/uzywane/) ;
### "u" - used (https://www.otomoto.pl/osobowe/nowe/)
getOffersInfo <- function(offer.type = "a", startPageNr = 1, stopPageNr = NULL, init.df = NULL, output.name = "offerInformation", sleep = 10)
{
loadPackages(pckgs = c("tidyverse", "xml2"))
options(stringsAsFactors = FALSE)
df <- defineInitialDataFrameWithOfferInfo(init.df = init.df)
url.core <- defineURLcore(offerType = offer.type)
URL.suffix <- "?page="
pageNumber <- 1
boardURL <- paste0(url.core, URL.suffix, pageNumber)
offersTags <- getOfferTags(URL = boardURL)
offerIds <- getOfferIdsFromBoard(tags=offersTags)
offerURLs <- getOfferURLsFromBoard(tags=offersTags)
ifUniqueOffer <- checkIfUniqueOffer(newIds = offerIds, alreadyScrapedIds = df$Id)
newOfferURLs <- offerURLs[ifUniqueOffer]
for(url in newOfferURLs)
{
singleOfferValues <- getSingleOffer(URL = url, sleep = sleep)
df <- rbind(df, singleOfferValues)
}
return(df)
}
x <- getOffersInfo()
checkIfUniqueOffer <- function(newIds = offerIds, alreadyScrapedIds = df$Id)
{
ifUniqueId <- newIds %in% alreadyScrapedIds
return(ifUniqueId)
}
x <- getOffersInfo()
View(x)
"a" %in% character(0)
## offer.type = c("a", "n", "u")
### "a" - all (https://www.otomoto.pl/osobowe/) ;
### "n" - new (https://www.otomoto.pl/osobowe/uzywane/) ;
### "u" - used (https://www.otomoto.pl/osobowe/nowe/)
getOffersInfo <- function(offer.type = "a", startPageNr = 1, stopPageNr = NULL, init.df = NULL, output.name = "offerInformation", sleep = 10)
{
loadPackages(pckgs = c("tidyverse", "xml2"))
options(stringsAsFactors = FALSE)
df <- defineInitialDataFrameWithOfferInfo(init.df = init.df)
url.core <- defineURLcore(offerType = offer.type)
URL.suffix <- "?page="
pageNumber <- 1
boardURL <- paste0(url.core, URL.suffix, pageNumber)
offersTags <- getOfferTags(URL = boardURL)
offerIds <- getOfferIdsFromBoard(tags=offersTags)
offerURLs <- getOfferURLsFromBoard(tags=offersTags)
ifUniqueOffer <- checkIfUniqueOffer(newIds = offerIds, alreadyScrapedIds = df$Id)
return(ifUniqueOffer)
newOfferURLs <- offerURLs[ifUniqueOffer]
for(url in newOfferURLs)
{
singleOfferValues <- getSingleOffer(URL = url, sleep = sleep)
df <- rbind(df, singleOfferValues)
}
return(singleOfferValues)
}
x <- getOffersInfo()
x
checkIfUniqueOffer <- function(newIds = offerIds, alreadyScrapedIds = df$Id)
{
ifUniqueId <- !(newIds %in% alreadyScrapedIds)
return(ifUniqueId)
}
## offer.type = c("a", "n", "u")
### "a" - all (https://www.otomoto.pl/osobowe/) ;
### "n" - new (https://www.otomoto.pl/osobowe/uzywane/) ;
### "u" - used (https://www.otomoto.pl/osobowe/nowe/)
getOffersInfo <- function(offer.type = "a", startPageNr = 1, stopPageNr = NULL, init.df = NULL, output.name = "offerInformation", sleep = 10)
{
loadPackages(pckgs = c("tidyverse", "xml2"))
options(stringsAsFactors = FALSE)
df <- defineInitialDataFrameWithOfferInfo(init.df = init.df)
url.core <- defineURLcore(offerType = offer.type)
URL.suffix <- "?page="
pageNumber <- 1
boardURL <- paste0(url.core, URL.suffix, pageNumber)
offersTags <- getOfferTags(URL = boardURL)
offerIds <- getOfferIdsFromBoard(tags=offersTags)
offerURLs <- getOfferURLsFromBoard(tags=offersTags)
ifUniqueOffer <- checkIfUniqueOffer(newIds = offerIds, alreadyScrapedIds = df$Id)
newOfferURLs <- offerURLs[ifUniqueOffer]
for(url in newOfferURLs)
{
singleOfferValues <- getSingleOffer(URL = url, sleep = sleep)
df <- rbind(df, singleOfferValues)
}
return(df)
}
x <- getOffersInfo()
View(x)
