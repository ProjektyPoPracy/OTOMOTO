offersTable <- data.frame(A=character(0), B=character(0), C=character(0))
names(offersTable) <- kolumny
newOfferURLs <- getNewOfferURLs(page = page, offersTable = offersTable)
for(url in newOfferURLs)
{
singleOfferValues <- getSingleOffer(URL = url, sleep = sleep)
offersTable <- rbind(offersTable, singleOfferValues)
}
return(offersTable)
}
x <- getOffersInfo(stopPageNr = 2, sleep = 5)
sum(duplicated(x))
View(x[duplicated(x) , ])
x <- getOffersInfo(init.df = x,
stopPageNr = 2, sleep = 5)
sum(duplicated(x))
table(x$Id)
length(table(x$Id)0
length(table(x$Id))
x <- getOffersInfo(#init.df = x,
stopPageNr = 2, sleep = 5)
x <- getOffersInfo(#init.df = x,
stopPageNr = 2, sleep = 5)
sum(duplicated(x))
table(x$Id)
length(table(x$Id))
getOffersInfoFromSingleBoard <- function(page, offersTable, sleep)
{
# offersTags <- getOfferTags(page = page)
# offerIds <- getOfferIdsFromBoard(tags=offersTags)
# offerURLs <- getOfferURLsFromBoard(tags=offersTags)
#
# ifUniqueOffer <- checkIfUniqueOffer(newIds = offerIds, alreadyScrapedIds = offersTable$Id)
# newOfferURLs <- offerURLs[ifUniqueOffer]
kolumny <- names(offersTable)
offersTable <- data.frame(A=character(0), B=character(0), C=character(0))
names(offersTable) <- kolumny
newOfferURLs <- getNewOfferURLs(page = page, offersTable = offersTable)
for(url in newOfferURLs)
{
singleOfferValues <- getSingleOffer(URL = url, sleep = sleep)
# offersTable <- rbind(offersTable, singleOfferValues)
}
return(offersTable)
}
## offer.type = c("a", "n", "u")
### "a" - all (https://www.otomoto.pl/osobowe/) ;
### "n" - new (https://www.otomoto.pl/osobowe/uzywane/) ;
### "u" - used (https://www.otomoto.pl/osobowe/nowe/)
getOffersInfo <- function(offer.type = "a", startPageNr = 1, stopPageNr = NULL, init.df = NULL, output.name = "offerInformation", sleep = 10)
{
loadPackages(pckgs = c("tidyverse", "xml2"))
options(stringsAsFactors = FALSE)
offersInfoOutput <- defineInitialDataFrameWithOfferInfo(init.df = init.df)
url.core <- defineURLcore(offerType = offer.type)
URL.suffix <- "?page="
pageNumber <- startPageNr
boardURL <- paste0(url.core, URL.suffix, pageNumber)
boardPage <- goToPage(URL = boardURL)
numberOfPagesToScraping <- defineNumberOfPagesToScraping(board.page = boardPage, last.page = stopPageNr)
## ----------------------------------------------------------
for(pageNumber in startPageNr:numberOfPagesToScraping)
{
boardURL <- paste0(url.core, URL.suffix, pageNumber)
boardPage <- goToPage(URL = boardURL)
newOffers <- getOffersInfoFromSingleBoard(page = boardPage, offersTable = offersInfoOutput, sleep = sleep)
# offersInfoOutput <- rbind(offersInfoOutput, newOffers)
assign(x = output.name, value = offersInfoOutput, envir = globalenv())
}
## ----------------------------------------------------------
return(offersInfoOutput)
}
## offer.type = c("a", "n", "u")
### "a" - all (https://www.otomoto.pl/osobowe/) ;
### "n" - new (https://www.otomoto.pl/osobowe/uzywane/) ;
### "u" - used (https://www.otomoto.pl/osobowe/nowe/)
getOffersInfo <- function(offer.type = "a", startPageNr = 1, stopPageNr = NULL, init.df = NULL, output.name = "offerInformation", sleep = 10)
{
loadPackages(pckgs = c("tidyverse", "xml2"))
options(stringsAsFactors = FALSE)
offersInfoOutput <- defineInitialDataFrameWithOfferInfo(init.df = init.df)
url.core <- defineURLcore(offerType = offer.type)
URL.suffix <- "?page="
pageNumber <- startPageNr
boardURL <- paste0(url.core, URL.suffix, pageNumber)
boardPage <- goToPage(URL = boardURL)
numberOfPagesToScraping <- defineNumberOfPagesToScraping(board.page = boardPage, last.page = stopPageNr)
## ----------------------------------------------------------
for(pageNumber in startPageNr:numberOfPagesToScraping)
{
boardURL <- paste0(url.core, URL.suffix, pageNumber)
boardPage <- goToPage(URL = boardURL)
offersInfoOutput <- getOffersInfoFromSingleBoard(page = boardPage, offersTable = offersInfoOutput, sleep = sleep)
# offersInfoOutput <- rbind(offersInfoOutput, newOffers)
assign(x = output.name, value = offersInfoOutput, envir = globalenv())
}
## ----------------------------------------------------------
return(offersInfoOutput)
}
getOffersInfoFromSingleBoard <- function(page, offersTable, sleep)
{
# offersTags <- getOfferTags(page = page)
# offerIds <- getOfferIdsFromBoard(tags=offersTags)
# offerURLs <- getOfferURLsFromBoard(tags=offersTags)
#
# ifUniqueOffer <- checkIfUniqueOffer(newIds = offerIds, alreadyScrapedIds = offersTable$Id)
# newOfferURLs <- offerURLs[ifUniqueOffer]
kolumny <- names(offersTable)
offersTable <- data.frame(A=character(0), B=character(0), C=character(0))
names(offersTable) <- kolumny
newOfferURLs <- getNewOfferURLs(page = page, offersTable = offersTable)
for(url in newOfferURLs)
{
singleOfferValues <- getSingleOffer(URL = url, sleep = sleep)
offersTable <- rbind(offersTable, singleOfferValues)
}
return(offersTable)
}
y <- getOffersInfo(init.df = x,
stopPageNr = 2, sleep = 5)
## offer.type = c("a", "n", "u")
### "a" - all (https://www.otomoto.pl/osobowe/) ;
### "n" - new (https://www.otomoto.pl/osobowe/uzywane/) ;
### "u" - used (https://www.otomoto.pl/osobowe/nowe/)
getOffersInfo <- function(offer.type = "a", startPageNr = 1, stopPageNr = NULL, init.df = NULL, output.name = "offerInformation", sleep = 10)
{
loadPackages(pckgs = c("tidyverse", "xml2"))
options(stringsAsFactors = FALSE)
offersInfoOutput <- defineInitialDataFrameWithOfferInfo(init.df = init.df)
url.core <- defineURLcore(offerType = offer.type)
URL.suffix <- "?page="
pageNumber <- startPageNr
boardURL <- paste0(url.core, URL.suffix, pageNumber)
boardPage <- goToPage(URL = boardURL)
numberOfPagesToScraping <- defineNumberOfPagesToScraping(board.page = boardPage, last.page = stopPageNr)
## ----------------------------------------------------------
for(pageNumber in startPageNr:numberOfPagesToScraping)
{
boardURL <- paste0(url.core, URL.suffix, pageNumber)
boardPage <- goToPage(URL = boardURL)
newOffers <- getOffersInfoFromSingleBoard(page = boardPage, offersTable = offersInfoOutput, sleep = sleep)
offersInfoOutput <- rbind(offersInfoOutput, newOffers)
assign(x = output.name, value = offersInfoOutput, envir = globalenv())
}
## ----------------------------------------------------------
return(offersInfoOutput)
}
y <- getOffersInfo(init.df = x,
stopPageNr = 2, sleep = 5)
table(x$Id)
table(y$Id)
table(y$Id)[ names(table(y$Id)) %in% names(table(y$Id)) ]
length(table(y$Id)[ names(table(y$Id)) %in% names(table(y$Id)) ])
length(table(y$Id)[ names(table(y$Id)) %in% names(table(x$Id)) ])
length(table(x$Id))
length(table(y$Id)[ names(table(y$Id)) %in% names(table(x$Id)) ])
length(!table(y$Id)[ names(table(y$Id)) %in% names(table(x$Id)) ])
table(y$Id)
length(table(y$Id))
length(table(y$Id)[ names(table(y$Id)) %in% names(table(x$Id)) ])
z <- getOffersInfo(init.df = y,
stopPageNr = 2, sleep = 5)
z <- getOffersInfo(init.df = y,
stopPageNr = 2, sleep = 5)
length(table(x$Id))
length(table(y$Id)[ names(table(y$Id)) %in% names(table(x$Id)) ])
length(table(z$Id)[ names(table(z$Id)) %in% names(table(x$Id)) ])
length(table(z$Id)[ names(table(z$Id)) %in% names(table(y$Id)) ])
length(table(z$Id))
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
x <- getOffersInfo(#init.df = y,
stopPageNr = 1, sleep = 5)
data.frame(matrix(nrow = 0, ncol = 3))
a<- data.frame(matrix(nrow = 0, ncol = 3))
names(a) <- names(x)
a
data.frame(A=character(0), B=character(0), C=character(0))
createEmptyTable <- function(columnNames)
{
emptyTable <- data.frame(matrix(nrow = 0, ncol = length(columnNames)))
names(emptyTable) <- columnNames
return(emptyTable)
}
getOffersInfoFromSingleBoard <- function(page, offersTable, sleep)
{
offersTable <- createEmptyTable(columnNames = names(offersTable))
newOfferURLs <- getNewOfferURLs(page = page, offersTable = offersTable)
for(url in newOfferURLs)
{
singleOfferValues <- getSingleOffer(URL = url, sleep = sleep)
offersTable <- rbind(offersTable, singleOfferValues)
}
return(offersTable)
}
## offer.type = c("a", "n", "u")
### "a" - all (https://www.otomoto.pl/osobowe/) ;
### "n" - new (https://www.otomoto.pl/osobowe/uzywane/) ;
### "u" - used (https://www.otomoto.pl/osobowe/nowe/)
getOffersInfo <- function(offer.type = "a", startPageNr = 1, stopPageNr = 10, init.df = NULL, output.name = "offerInformation", sleep = 10)
{
loadPackages(pckgs = c("tidyverse", "xml2"))
options(stringsAsFactors = FALSE)
offersInfoOutput <- defineInitialDataFrameWithOfferInfo(init.df = init.df)
url.core <- defineURLcore(offerType = offer.type)
URL.suffix <- "?page="
pageNumber <- startPageNr
boardURL <- paste0(url.core, URL.suffix, pageNumber)
boardPage <- goToPage(URL = boardURL)
numberOfPagesToScraping <- defineNumberOfPagesToScraping(board.page = boardPage, last.page = stopPageNr)
## ----------------------------------------------------------
for(pageNumber in startPageNr:numberOfPagesToScraping)
{
boardURL <- paste0(url.core, URL.suffix, pageNumber)
boardPage <- goToPage(URL = boardURL)
newOffers <- getOffersInfoFromSingleBoard(page = boardPage, offersTable = offersInfoOutput, sleep = sleep)
offersInfoOutput <- rbind(offersInfoOutput, newOffers)
assign(x = output.name, value = offersInfoOutput, envir = globalenv())
}
## ----------------------------------------------------------
return(offersInfoOutput)
}
## offer.type = c("a", "n", "u")
### "a" - all (https://www.otomoto.pl/osobowe/) ;
### "n" - new (https://www.otomoto.pl/osobowe/uzywane/) ;
### "u" - used (https://www.otomoto.pl/osobowe/nowe/)
getOffersInfo <- function(offer.type = "a", startPageNr = 1, stopPageNr = 10, init.df = NULL, output.name = "offers", sleep = 10)
{
loadPackages(pckgs = c("tidyverse", "xml2"))
options(stringsAsFactors = FALSE)
offersInfoOutput <- defineInitialDataFrameWithOfferInfo(init.df = init.df)
url.core <- defineURLcore(offerType = offer.type)
URL.suffix <- "?page="
pageNumber <- startPageNr
boardURL <- paste0(url.core, URL.suffix, pageNumber)
boardPage <- goToPage(URL = boardURL)
numberOfPagesToScraping <- defineNumberOfPagesToScraping(board.page = boardPage, last.page = stopPageNr)
## ----------------------------------------------------------
for(pageNumber in startPageNr:numberOfPagesToScraping)
{
boardURL <- paste0(url.core, URL.suffix, pageNumber)
boardPage <- goToPage(URL = boardURL)
newOffers <- getOffersInfoFromSingleBoard(page = boardPage, offersTable = offersInfoOutput, sleep = sleep)
offersInfoOutput <- rbind(offersInfoOutput, newOffers)
assign(x = output.name, value = offersInfoOutput, envir = globalenv())
}
## ----------------------------------------------------------
return(offersInfoOutput)
}
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
getOffersInfo(
offer.type = "u", ## "a" - all; "n" - new; "u" - used
startPageNr = 1, ## page number to start; default 1
stopPageNr = 10, ## page number to stop; default 10; if NULL then running function to last page
init.df = NULL, ## declare data frame you have if you want add info about new offers to it
output.name = "offers", ## output data frame name. Function create date frame with that name; default "offers"
sleep = 5 ## forced break between scraping next offer pages
)
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
getOffersInfo(
offer.type = "u", ## possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## page number to start; default 1
stopPageNr = 10, ## page number to stop; default 10; if NULL then running function to last page
init.df = NULL, ## declare data frame you have if you want add info about new offers to it
output.name = "offers", ## output data frame name. Function create date frame with that name; default "offers"
sleep = 5 ## forced break between scraping next offer pages
)
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
getOffersInfo(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 10, ## Page number to stop; default 10; if NULL then running function to last page
init.df = offers, ## Declare data frame you have if you want add info about new offers to it
output.name = "offers", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000 ## Time required to interrupt the connection. Too low value should cause errors.
)
## offer.type = c("a", "n", "u")
### "a" - all (https://www.otomoto.pl/osobowe/) ;
### "n" - new (https://www.otomoto.pl/osobowe/uzywane/) ;
### "u" - used (https://www.otomoto.pl/osobowe/nowe/)
getOffersInfo <- function(offer.type = "a", startPageNr = 1, stopPageNr = 10, init.df = NULL, output.name = "offers", sleep = 10, timeout = 4000000)
{
loadPackages(pckgs = c("tidyverse", "xml2"))
options(stringsAsFactors = FALSE, timeout = timeout)
offersInfoOutput <- defineInitialDataFrameWithOfferInfo(init.df = init.df)
url.core <- defineURLcore(offerType = offer.type)
URL.suffix <- "?page="
pageNumber <- startPageNr
boardURL <- paste0(url.core, URL.suffix, pageNumber)
boardPage <- goToPage(URL = boardURL, timeout = timeout)
numberOfPagesToScraping <- defineNumberOfPagesToScraping(board.page = boardPage, last.page = stopPageNr)
## ----------------------------------------------------------
for(pageNumber in startPageNr:numberOfPagesToScraping)
{
boardURL <- paste0(url.core, URL.suffix, pageNumber)
boardPage <- goToPage(URL = boardURL, timeout = timeout)
newOffers <- getOffersInfoFromSingleBoard(page = boardPage, offersTable = offersInfoOutput, sleep = sleep, timeout = timeout)
offersInfoOutput <- rbind(offersInfoOutput, newOffers)
assign(x = output.name, value = offersInfoOutput, envir = globalenv())
}
## ----------------------------------------------------------
return(offersInfoOutput)
}
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
getOffersInfo(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 10, ## Page number to stop; default 10; if NULL then running function to last page
init.df = offers, ## Declare data frame you have if you want add info about new offers to it
output.name = "offers", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000 ## Time required to interrupt the connection. Too low value should cause errors.
)
table(offers$Id)
length(table(offers$Id))
length(unique(offers$Label))
length(unique(offers$Label))
nrow(offers)
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
getOffersInfo(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 10, ## Page number to stop; default 10; if NULL then running function to last page
init.df = offers, ## Declare data frame you have if you want add info about new offers to it
output.name = "offers", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000 ## Time required to interrupt the connection. Too low value should cause errors.
)
getOfferPrice <- function(page, timeout)
{
options(timeout = timeout)
offerPriceNumber <- page %>%
rvest::html_node(xpath = "//section[@class='offer-header']/div[@class='offer-header__row']/div[@class='offer-price']/span[@class='offer-price__number']") %>%
rvest::html_text() %>%
gsub(pattern = "[^0-9.]", replacement = "", x = .)
offerPriceCurrency <- page %>%
rvest::html_node(xpath = "//section[@class='offer-header']/div[@class='offer-header__row']/div[@class='offer-price']/span[@class='offer-price__number']/span[@class='offer-price__currency']") %>%
rvest::html_text()
offerPriceDetails <- page %>%
rvest::html_node(xpath = "//section[@class='offer-header']/div[@class='offer-header__row']/div[@class='offer-price']/span[@class='offer-price__details']") %>%
rvest::html_text() %>%
strsplit(split = ", ") %>%
unlist() %>%
unname()
offerPriceAll <- c(Cena = offerPriceNumber, Waluta = offerPriceCurrency, CenaDodInfo = offerPriceDetails)
return(offerPriceAll)
}
getOffersInfo(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 10, ## Page number to stop; default 10; if NULL then running function to last page
init.df = offers, ## Declare data frame you have if you want add info about new offers to it
output.name = "offers", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000 ## Time required to interrupt the connection. Too low value should cause errors.
)
# 22141
?read_html()
goToPage <- function(URL, timeout)
{
options(timeout = timeout)
page <- xml2::read_html(URL, options = c("RECOVER", "NOBLANKS"))
return(page)
}
nrow(offers)
getOffersInfo(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 10, ## Page number to stop; default 10; if NULL then running function to last page
init.df = offers, ## Declare data frame you have if you want add info about new offers to it
output.name = "offers", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000 ## Time required to interrupt the connection. Too low value should cause errors.
)
nrow(offers)
goToPage <- function(URL, timeout)
{
options(timeout = timeout)
page <- xml2::read_html(URL, options = c("NOERROR", "NOBLANKS"))
return(page)
}
getOffersInfo(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 10, ## Page number to stop; default 10; if NULL then running function to last page
init.df = offers, ## Declare data frame you have if you want add info about new offers to it
output.name = "offers", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000 ## Time required to interrupt the connection. Too low value should cause errors.
)
nrow(offers)
length(unique(offers$Id))
seq_along(20)
seq_len(20)
getOffersInfo_avoidErr <- function(offer.type = "a", startPageNr = 1, stopPageNr = 10, init.df = NULL, output.name = "offers", sleep = 10, timeout = 4000000, n_iter = 100)
{
for(i in seq_len(n_iter))
{
tryCatch(
expr = {
getOffersInfo(
offer.type = offer.type, ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = startPageNr, ## Page number to start; default 1
stopPageNr = stopPageNr, ## Page number to stop; default 10; if NULL then running function to last page
init.df = init.df, ## Declare data frame you have if you want add info about new offers to it
output.name = output.name, ## An output data frame name. Function create date frame with that name; default "offers"
sleep = sleep, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = timeout ## Time required to interrupt the connection. Too low value should cause errors.
)
},
error = function(e)
{
message("An error has occured. I am restarting the function.")
}
)
}
return(invisible())
}
getOffersInfo_avoidErr <- function(offer.type = "a", startPageNr = 1, stopPageNr = 10, init.df = NULL, output.name = "offers", sleep = 10, timeout = 4000000, n_iter = 100)
{
for(i in seq_len(n_iter))
{
tryCatch(
expr = {
getOffersInfo(
offer.type = offer.type, ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = startPageNr, ## Page number to start; default 1
stopPageNr = stopPageNr, ## Page number to stop; default 10; if NULL then running function to last page
init.df = init.df, ## Declare data frame you have if you want add info about new offers to it
output.name = output.name, ## An output data frame name. Function create date frame with that name; default "offers"
sleep = sleep, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = timeout ## Time required to interrupt the connection. Too low value should cause errors.
)
},
error = function(e)
{
message("An error has occured. I am restarting the function.")
}
)
}
return(invisible())
}
getOffersInfo_avoidErr <- function(offer.type = "a", startPageNr = 1, stopPageNr = 10, init.df = NULL, output.name = "offers", sleep = 10, timeout = 4000000, n_iter = 100)
{
for(i in seq_len(n_iter))
{
tryCatch(
expr = {
getOffersInfo(
offer.type = offer.type, ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = startPageNr, ## Page number to start; default 1
stopPageNr = stopPageNr, ## Page number to stop; default 10; if NULL then running function to last page
init.df = init.df, ## Declare data frame you have if you want add info about new offers to it
output.name = output.name, ## An output data frame name. Function create date frame with that name; default "offers"
sleep = sleep, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = timeout ## Time required to interrupt the connection. Too low value should cause errors.
)
},
error = function(e)
{
message("An error has occured. I am restarting the function.")
}
)
}
return(invisible())
}
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
getOffersInfo_avoidErr(
offer.type = "u", ## Possible values: "a" - all; "n" - new; "u" - used
startPageNr = 1, ## Page number to start; default 1
stopPageNr = 10, ## Page number to stop; default 10; if NULL then running function to last page
init.df = offers, ## Declare data frame you have if you want add info about new offers to it
output.name = "offers", ## An output data frame name. Function create date frame with that name; default "offers"
sleep = 5, ## Forced break between scraping next offer pages; default 10; do not overload the website with your activity
timeout = 4000000, ## Time required to interrupt the connection. Too low value should cause errors.
n_iter = 100 ## How many times the function has be restarted
)
nrow(offers)
length(unique(offers$Id))
