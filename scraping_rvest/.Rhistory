x <- getOffersInfo()
getOffersInfoFromSingleBoard <- function(URLs, offers.table)
{
for(url in URLs)
{
singleOfferValues <- getSingleOffer(URL = url, sleep = sleep)
offers.table <- rbind(offers.table, singleOfferValues)
}
return(offers.table)
}
## offer.type = c("a", "n", "u")
### "a" - all (https://www.otomoto.pl/osobowe/) ;
### "n" - new (https://www.otomoto.pl/osobowe/uzywane/) ;
### "u" - used (https://www.otomoto.pl/osobowe/nowe/)
getOffersInfo <- function(offer.type = "a", startPageNr = 1, stopPageNr = NULL, init.df = NULL, output.name = "offerInformation", sleep = 10)
{
loadPackages(pckgs = c("tidyverse", "xml2"))
options(stringsAsFactors = FALSE)
offersInfoOutput <- defineInitialDataFrameWithOfferInfo(init.df = init.df)
url.core <- defineURLcore(offerType = offer.type)
URL.suffix <- "?page="
pageNumber <- startPageNr
boardURL <- paste0(url.core, URL.suffix, pageNumber)
boardPage <- goToPage(URL = boardURL)
offersTags <- getOfferTags(page = boardPage)
offerIds <- getOfferIdsFromBoard(tags=offersTags)
offerURLs <- getOfferURLsFromBoard(tags=offersTags)
ifUniqueOffer <- checkIfUniqueOffer(newIds = offerIds, alreadyScrapedIds = offersInfoOutput$Id)
newOfferURLs <- offerURLs[ifUniqueOffer]
numberOfPagesToScraping <- defineNumberOfPagesToScraping(board.page = boardPage, last.page = stopPageNr)
offersInfoOutput <- getOffersInfoFromSingleBoard(URLs = newOfferURLs, offers.table = offersInfoOutput)
return(offersInfoOutput)
}
x <- getOffersInfo()
getOffersInfoFromSingleBoard <- function(URLs, offers.table, sleep)
{
for(url in URLs)
{
singleOfferValues <- getSingleOffer(URL = url, sleep = sleep)
offers.table <- rbind(offers.table, singleOfferValues)
}
return(offers.table)
}
## offer.type = c("a", "n", "u")
### "a" - all (https://www.otomoto.pl/osobowe/) ;
### "n" - new (https://www.otomoto.pl/osobowe/uzywane/) ;
### "u" - used (https://www.otomoto.pl/osobowe/nowe/)
getOffersInfo <- function(offer.type = "a", startPageNr = 1, stopPageNr = NULL, init.df = NULL, output.name = "offerInformation", sleep = 10)
{
loadPackages(pckgs = c("tidyverse", "xml2"))
options(stringsAsFactors = FALSE)
offersInfoOutput <- defineInitialDataFrameWithOfferInfo(init.df = init.df)
url.core <- defineURLcore(offerType = offer.type)
URL.suffix <- "?page="
pageNumber <- startPageNr
boardURL <- paste0(url.core, URL.suffix, pageNumber)
boardPage <- goToPage(URL = boardURL)
offersTags <- getOfferTags(page = boardPage)
offerIds <- getOfferIdsFromBoard(tags=offersTags)
offerURLs <- getOfferURLsFromBoard(tags=offersTags)
ifUniqueOffer <- checkIfUniqueOffer(newIds = offerIds, alreadyScrapedIds = offersInfoOutput$Id)
newOfferURLs <- offerURLs[ifUniqueOffer]
numberOfPagesToScraping <- defineNumberOfPagesToScraping(board.page = boardPage, last.page = stopPageNr)
offersInfoOutput <- getOffersInfoFromSingleBoard(URLs = newOfferURLs, offers.table = offersInfoOutput, sleep = sleep)
return(offersInfoOutput)
}
x <- getOffersInfo()
View(x)
getOfferTags <- function(page)
{
offers <- page %>%
rvest::html_nodes(xpath = "//div/h2/a[@class='offer-title__link']")
return(offers)
}
## offer.type = c("a", "n", "u")
### "a" - all (https://www.otomoto.pl/osobowe/) ;
### "n" - new (https://www.otomoto.pl/osobowe/uzywane/) ;
### "u" - used (https://www.otomoto.pl/osobowe/nowe/)
getOffersInfo <- function(offer.type = "a", startPageNr = 1, stopPageNr = NULL, init.df = NULL, output.name = "offerInformation", sleep = 10)
{
loadPackages(pckgs = c("tidyverse", "xml2"))
options(stringsAsFactors = FALSE)
offersInfoOutput <- defineInitialDataFrameWithOfferInfo(init.df = init.df)
url.core <- defineURLcore(offerType = offer.type)
URL.suffix <- "?page="
pageNumber <- startPageNr
boardURL <- paste0(url.core, URL.suffix, pageNumber)
boardPage <- goToPage(URL = boardURL)
numberOfPagesToScraping <- defineNumberOfPagesToScraping(board.page = boardPage, last.page = stopPageNr)
## ----------------------------------------------------------
offersTags <- getOfferTags(page = boardPage)
offerIds <- getOfferIdsFromBoard(tags=offersTags)
offerURLs <- getOfferURLsFromBoard(tags=offersTags)
ifUniqueOffer <- checkIfUniqueOffer(newIds = offerIds, alreadyScrapedIds = offersInfoOutput$Id)
newOfferURLs <- offerURLs[ifUniqueOffer]
offersInfoOutput <- getOffersInfoFromSingleBoard(URLs = newOfferURLs, offers.table = offersInfoOutput, sleep = sleep)
## ----------------------------------------------------------
return(offersInfoOutput)
}
defineNumberOfPagesToScraping <- function(board.page, last.page)
{
pageNumbersList <- getPageNumbersList(page = board.page)
maximumPageNumber <- chooseMaximumPageNumber(page.numbers = pageNumbersList)
last.page <- assignNewMaxPageNumber(declared.last.page = last.page, maxPossibleNumber = maximumPageNumber)
return(last.page)
}
getOffersInfoFromSingleBoard <- function(page, offersTable, sleep)
{
offersTags <- getOfferTags(page = page)
offerIds <- getOfferIdsFromBoard(tags=offersTags)
offerURLs <- getOfferURLsFromBoard(tags=offersTags)
ifUniqueOffer <- checkIfUniqueOffer(newIds = offerIds, alreadyScrapedIds = offersTable$Id)
newOfferURLs <- offerURLs[ifUniqueOffer]
for(url in newOfferURLs)
{
singleOfferValues <- getSingleOffer(URL = url, sleep = sleep)
offers.table <- rbind(offersTable, singleOfferValues)
}
return(offers.table)
}
x <- getOffersInfo()
## offer.type = c("a", "n", "u")
### "a" - all (https://www.otomoto.pl/osobowe/) ;
### "n" - new (https://www.otomoto.pl/osobowe/uzywane/) ;
### "u" - used (https://www.otomoto.pl/osobowe/nowe/)
getOffersInfo <- function(offer.type = "a", startPageNr = 1, stopPageNr = NULL, init.df = NULL, output.name = "offerInformation", sleep = 10)
{
loadPackages(pckgs = c("tidyverse", "xml2"))
options(stringsAsFactors = FALSE)
offersInfoOutput <- defineInitialDataFrameWithOfferInfo(init.df = init.df)
url.core <- defineURLcore(offerType = offer.type)
URL.suffix <- "?page="
pageNumber <- startPageNr
boardURL <- paste0(url.core, URL.suffix, pageNumber)
boardPage <- goToPage(URL = boardURL)
numberOfPagesToScraping <- defineNumberOfPagesToScraping(board.page = boardPage, last.page = stopPageNr)
## ----------------------------------------------------------
# offersTags <- getOfferTags(page = boardPage)
# offerIds <- getOfferIdsFromBoard(tags=offersTags)
# offerURLs <- getOfferURLsFromBoard(tags=offersTags)
#
# ifUniqueOffer <- checkIfUniqueOffer(newIds = offerIds, alreadyScrapedIds = offersInfoOutput$Id)
# newOfferURLs <- offerURLs[ifUniqueOffer]
offersInfoOutput <- getOffersInfoFromSingleBoard(page = boardPage, offersTable = offersInfoOutput, sleep = sleep)
## ----------------------------------------------------------
return(offersInfoOutput)
}
x <- getOffersInfo()
mean(2)
getOffersInfoFromSingleBoard <- function(page, offersTable, sleep)
{
# offersTags <- getOfferTags(page = page)
# offerIds <- getOfferIdsFromBoard(tags=offersTags)
# offerURLs <- getOfferURLsFromBoard(tags=offersTags)
#
# ifUniqueOffer <- checkIfUniqueOffer(newIds = offerIds, alreadyScrapedIds = offersTable$Id)
# newOfferURLs <- offerURLs[ifUniqueOffer]
newOfferURLs <- getNewOfferURLs(page = page, offersTable = offersTable)
for(url in newOfferURLs)
{
singleOfferValues <- getSingleOffer(URL = url, sleep = sleep)
offers.table <- rbind(offersTable, singleOfferValues)
}
return(offers.table)
}
x <- getOffersInfo(stopPageNr = 2)
View(x)
## offer.type = c("a", "n", "u")
### "a" - all (https://www.otomoto.pl/osobowe/) ;
### "n" - new (https://www.otomoto.pl/osobowe/uzywane/) ;
### "u" - used (https://www.otomoto.pl/osobowe/nowe/)
getOffersInfo <- function(offer.type = "a", startPageNr = 1, stopPageNr = NULL, init.df = NULL, output.name = "offerInformation", sleep = 10)
{
loadPackages(pckgs = c("tidyverse", "xml2"))
options(stringsAsFactors = FALSE)
offersInfoOutput <- defineInitialDataFrameWithOfferInfo(init.df = init.df)
url.core <- defineURLcore(offerType = offer.type)
URL.suffix <- "?page="
pageNumber <- startPageNr
boardURL <- paste0(url.core, URL.suffix, pageNumber)
boardPage <- goToPage(URL = boardURL)
numberOfPagesToScraping <- defineNumberOfPagesToScraping(board.page = boardPage, last.page = stopPageNr)
## ----------------------------------------------------------
for(pageNumber in startPageNr:numberOfPagesToScraping)
{
boardURL <- paste0(url.core, URL.suffix, pageNumber)
boardPage <- goToPage(URL = boardURL)
newOffers <- getOffersInfoFromSingleBoard(page = boardPage, offersTable = offersInfoOutput, sleep = sleep)
offersInfoOutput <- rbind(offersInfoOutput, newOffers)
}
## ----------------------------------------------------------
return(offersInfoOutput)
}
getOffersInfoFromSingleBoard <- function(page, offersTable, sleep)
{
# offersTags <- getOfferTags(page = page)
# offerIds <- getOfferIdsFromBoard(tags=offersTags)
# offerURLs <- getOfferURLsFromBoard(tags=offersTags)
#
# ifUniqueOffer <- checkIfUniqueOffer(newIds = offerIds, alreadyScrapedIds = offersTable$Id)
# newOfferURLs <- offerURLs[ifUniqueOffer]
newOfferURLs <- getNewOfferURLs(page = page, offersTable = offersTable)
for(url in newOfferURLs)
{
singleOfferValues <- getSingleOffer(URL = url, sleep = sleep)
offers.table <- rbind(offersTable, singleOfferValues)
}
return(offers.table)
}
getNewOfferURLs <- function(page, offersTable)
{
offersTags <- getOfferTags(page = page)
offerIds <- getOfferIdsFromBoard(tags=offersTags)
offerURLs <- getOfferURLsFromBoard(tags=offersTags)
ifUniqueOffer <- checkIfUniqueOffer(newIds = offerIds, alreadyScrapedIds = offersTable$Id)
newOfferURLs <- offerURLs[ifUniqueOffer]
return(newOfferURLs)
}
x <- getOffersInfo(stopPageNr = 2)
View(x)
getOffersInfoFromSingleBoard <- function(page, offersTable, sleep)
{
# offersTags <- getOfferTags(page = page)
# offerIds <- getOfferIdsFromBoard(tags=offersTags)
# offerURLs <- getOfferURLsFromBoard(tags=offersTags)
#
# ifUniqueOffer <- checkIfUniqueOffer(newIds = offerIds, alreadyScrapedIds = offersTable$Id)
# newOfferURLs <- offerURLs[ifUniqueOffer]
newOfferURLs <- getNewOfferURLs(page = page, offersTable = offersTable)
for(url in newOfferURLs)
{
singleOfferValues <- getSingleOffer(URL = url, sleep = sleep)
offersTable <- rbind(offersTable, singleOfferValues)
}
return(offersTable)
}
## offer.type = c("a", "n", "u")
### "a" - all (https://www.otomoto.pl/osobowe/) ;
### "n" - new (https://www.otomoto.pl/osobowe/uzywane/) ;
### "u" - used (https://www.otomoto.pl/osobowe/nowe/)
getOffersInfo <- function(offer.type = "a", startPageNr = 1, stopPageNr = NULL, init.df = NULL, output.name = "offerInformation", sleep = 10)
{
loadPackages(pckgs = c("tidyverse", "xml2"))
options(stringsAsFactors = FALSE)
offersInfoOutput <- defineInitialDataFrameWithOfferInfo(init.df = init.df)
url.core <- defineURLcore(offerType = offer.type)
URL.suffix <- "?page="
pageNumber <- startPageNr
boardURL <- paste0(url.core, URL.suffix, pageNumber)
boardPage <- goToPage(URL = boardURL)
numberOfPagesToScraping <- defineNumberOfPagesToScraping(board.page = boardPage, last.page = stopPageNr)
## ----------------------------------------------------------
for(pageNumber in startPageNr:numberOfPagesToScraping)
{
boardURL <- paste0(url.core, URL.suffix, pageNumber)
boardPage <- goToPage(URL = boardURL)
newOffers <- getOffersInfoFromSingleBoard(page = boardPage, offersTable = offersInfoOutput, sleep = sleep)
offersInfoOutput <- rbind(offersInfoOutput, newOffers)
}
## ----------------------------------------------------------
return(offersInfoOutput)
}
getOffersInfoFromSingleBoard <- function(page, offersTable, sleep)
{
# offersTags <- getOfferTags(page = page)
# offerIds <- getOfferIdsFromBoard(tags=offersTags)
# offerURLs <- getOfferURLsFromBoard(tags=offersTags)
#
# ifUniqueOffer <- checkIfUniqueOffer(newIds = offerIds, alreadyScrapedIds = offersTable$Id)
# newOfferURLs <- offerURLs[ifUniqueOffer]
newOfferURLs <- getNewOfferURLs(page = page, offersTable = offersTable)
for(url in newOfferURLs)
{
singleOfferValues <- getSingleOffer(URL = url, sleep = sleep)
offersTable <- rbind(offersTable, singleOfferValues)
}
return(offersTable)
}
funList <- list.files("./functions/codes/")
for(f in funList)
{
source(file = paste0("./functions/codes/", f))
}; rm(f, funList)
x <- getOffersInfo(stopPageNr = 2)
x <- getOffersInfo(stopPageNr = 2, sleep = 5)
View(x)
x <- getOffersInfo(init.df = x,stopPageNr = 2, sleep = 5)
View(x)
nrow(duplicated(x))
sum(duplicated(x))
sum(!duplicated(x))
getOffersInfoFromSingleBoard <- function(page, offersInfoOutput, sleep)
{
# offersTags <- getOfferTags(page = page)
# offerIds <- getOfferIdsFromBoard(tags=offersTags)
# offerURLs <- getOfferURLsFromBoard(tags=offersTags)
#
# ifUniqueOffer <- checkIfUniqueOffer(newIds = offerIds, alreadyScrapedIds = offersTable$Id)
# newOfferURLs <- offerURLs[ifUniqueOffer]
kolumny <- names(offersInfoOutput)
offersInfoOutput <- data.frame(rep(character(0),3))
names(offersInfoOutput) <- kolumny
newOfferURLs <- getNewOfferURLs(page = page, offersTable = offersTable)
for(url in newOfferURLs)
{
singleOfferValues <- getSingleOffer(URL = url, sleep = sleep)
offersTable <- rbind(offersTable, singleOfferValues)
}
return(offersTable)
}
x <- getOffersInfo(init.df = x,stopPageNr = 2, sleep = 5)
x <- getOffersInfo(stopPageNr = 2, sleep = 5)
data.frame(rep(character(0),3))
rep(character(0),3)
getOffersInfoFromSingleBoard <- function(page, offersInfoOutput, sleep)
{
# offersTags <- getOfferTags(page = page)
# offerIds <- getOfferIdsFromBoard(tags=offersTags)
# offerURLs <- getOfferURLsFromBoard(tags=offersTags)
#
# ifUniqueOffer <- checkIfUniqueOffer(newIds = offerIds, alreadyScrapedIds = offersTable$Id)
# newOfferURLs <- offerURLs[ifUniqueOffer]
kolumny <- names(offersInfoOutput)
offersInfoOutput <- data.frame(A=character(0), B=character(0), C=character(0))
names(offersInfoOutput) <- kolumny
newOfferURLs <- getNewOfferURLs(page = page, offersTable = offersTable)
for(url in newOfferURLs)
{
singleOfferValues <- getSingleOffer(URL = url, sleep = sleep)
offersTable <- rbind(offersTable, singleOfferValues)
}
return(offersTable)
}
x <- getOffersInfo(stopPageNr = 2, sleep = 5)
getOffersInfoFromSingleBoard <- function(page, offersTable, sleep)
{
# offersTags <- getOfferTags(page = page)
# offerIds <- getOfferIdsFromBoard(tags=offersTags)
# offerURLs <- getOfferURLsFromBoard(tags=offersTags)
#
# ifUniqueOffer <- checkIfUniqueOffer(newIds = offerIds, alreadyScrapedIds = offersTable$Id)
# newOfferURLs <- offerURLs[ifUniqueOffer]
kolumny <- names(offersTable)
offersTable <- data.frame(A=character(0), B=character(0), C=character(0))
names(offersTable) <- kolumny
newOfferURLs <- getNewOfferURLs(page = page, offersTable = offersTable)
for(url in newOfferURLs)
{
singleOfferValues <- getSingleOffer(URL = url, sleep = sleep)
offersTable <- rbind(offersTable, singleOfferValues)
}
return(offersTable)
}
x <- getOffersInfo(stopPageNr = 2, sleep = 5)
sum(duplicated(x))
View(x[duplicated(x) , ])
x <- getOffersInfo(init.df = x,
stopPageNr = 2, sleep = 5)
sum(duplicated(x))
table(x$Id)
length(table(x$Id)0
length(table(x$Id))
x <- getOffersInfo(#init.df = x,
stopPageNr = 2, sleep = 5)
x <- getOffersInfo(#init.df = x,
stopPageNr = 2, sleep = 5)
sum(duplicated(x))
table(x$Id)
length(table(x$Id))
getOffersInfoFromSingleBoard <- function(page, offersTable, sleep)
{
# offersTags <- getOfferTags(page = page)
# offerIds <- getOfferIdsFromBoard(tags=offersTags)
# offerURLs <- getOfferURLsFromBoard(tags=offersTags)
#
# ifUniqueOffer <- checkIfUniqueOffer(newIds = offerIds, alreadyScrapedIds = offersTable$Id)
# newOfferURLs <- offerURLs[ifUniqueOffer]
kolumny <- names(offersTable)
offersTable <- data.frame(A=character(0), B=character(0), C=character(0))
names(offersTable) <- kolumny
newOfferURLs <- getNewOfferURLs(page = page, offersTable = offersTable)
for(url in newOfferURLs)
{
singleOfferValues <- getSingleOffer(URL = url, sleep = sleep)
# offersTable <- rbind(offersTable, singleOfferValues)
}
return(offersTable)
}
## offer.type = c("a", "n", "u")
### "a" - all (https://www.otomoto.pl/osobowe/) ;
### "n" - new (https://www.otomoto.pl/osobowe/uzywane/) ;
### "u" - used (https://www.otomoto.pl/osobowe/nowe/)
getOffersInfo <- function(offer.type = "a", startPageNr = 1, stopPageNr = NULL, init.df = NULL, output.name = "offerInformation", sleep = 10)
{
loadPackages(pckgs = c("tidyverse", "xml2"))
options(stringsAsFactors = FALSE)
offersInfoOutput <- defineInitialDataFrameWithOfferInfo(init.df = init.df)
url.core <- defineURLcore(offerType = offer.type)
URL.suffix <- "?page="
pageNumber <- startPageNr
boardURL <- paste0(url.core, URL.suffix, pageNumber)
boardPage <- goToPage(URL = boardURL)
numberOfPagesToScraping <- defineNumberOfPagesToScraping(board.page = boardPage, last.page = stopPageNr)
## ----------------------------------------------------------
for(pageNumber in startPageNr:numberOfPagesToScraping)
{
boardURL <- paste0(url.core, URL.suffix, pageNumber)
boardPage <- goToPage(URL = boardURL)
newOffers <- getOffersInfoFromSingleBoard(page = boardPage, offersTable = offersInfoOutput, sleep = sleep)
# offersInfoOutput <- rbind(offersInfoOutput, newOffers)
assign(x = output.name, value = offersInfoOutput, envir = globalenv())
}
## ----------------------------------------------------------
return(offersInfoOutput)
}
## offer.type = c("a", "n", "u")
### "a" - all (https://www.otomoto.pl/osobowe/) ;
### "n" - new (https://www.otomoto.pl/osobowe/uzywane/) ;
### "u" - used (https://www.otomoto.pl/osobowe/nowe/)
getOffersInfo <- function(offer.type = "a", startPageNr = 1, stopPageNr = NULL, init.df = NULL, output.name = "offerInformation", sleep = 10)
{
loadPackages(pckgs = c("tidyverse", "xml2"))
options(stringsAsFactors = FALSE)
offersInfoOutput <- defineInitialDataFrameWithOfferInfo(init.df = init.df)
url.core <- defineURLcore(offerType = offer.type)
URL.suffix <- "?page="
pageNumber <- startPageNr
boardURL <- paste0(url.core, URL.suffix, pageNumber)
boardPage <- goToPage(URL = boardURL)
numberOfPagesToScraping <- defineNumberOfPagesToScraping(board.page = boardPage, last.page = stopPageNr)
## ----------------------------------------------------------
for(pageNumber in startPageNr:numberOfPagesToScraping)
{
boardURL <- paste0(url.core, URL.suffix, pageNumber)
boardPage <- goToPage(URL = boardURL)
offersInfoOutput <- getOffersInfoFromSingleBoard(page = boardPage, offersTable = offersInfoOutput, sleep = sleep)
# offersInfoOutput <- rbind(offersInfoOutput, newOffers)
assign(x = output.name, value = offersInfoOutput, envir = globalenv())
}
## ----------------------------------------------------------
return(offersInfoOutput)
}
getOffersInfoFromSingleBoard <- function(page, offersTable, sleep)
{
# offersTags <- getOfferTags(page = page)
# offerIds <- getOfferIdsFromBoard(tags=offersTags)
# offerURLs <- getOfferURLsFromBoard(tags=offersTags)
#
# ifUniqueOffer <- checkIfUniqueOffer(newIds = offerIds, alreadyScrapedIds = offersTable$Id)
# newOfferURLs <- offerURLs[ifUniqueOffer]
kolumny <- names(offersTable)
offersTable <- data.frame(A=character(0), B=character(0), C=character(0))
names(offersTable) <- kolumny
newOfferURLs <- getNewOfferURLs(page = page, offersTable = offersTable)
for(url in newOfferURLs)
{
singleOfferValues <- getSingleOffer(URL = url, sleep = sleep)
offersTable <- rbind(offersTable, singleOfferValues)
}
return(offersTable)
}
y <- getOffersInfo(init.df = x,
stopPageNr = 2, sleep = 5)
## offer.type = c("a", "n", "u")
### "a" - all (https://www.otomoto.pl/osobowe/) ;
### "n" - new (https://www.otomoto.pl/osobowe/uzywane/) ;
### "u" - used (https://www.otomoto.pl/osobowe/nowe/)
getOffersInfo <- function(offer.type = "a", startPageNr = 1, stopPageNr = NULL, init.df = NULL, output.name = "offerInformation", sleep = 10)
{
loadPackages(pckgs = c("tidyverse", "xml2"))
options(stringsAsFactors = FALSE)
offersInfoOutput <- defineInitialDataFrameWithOfferInfo(init.df = init.df)
url.core <- defineURLcore(offerType = offer.type)
URL.suffix <- "?page="
pageNumber <- startPageNr
boardURL <- paste0(url.core, URL.suffix, pageNumber)
boardPage <- goToPage(URL = boardURL)
numberOfPagesToScraping <- defineNumberOfPagesToScraping(board.page = boardPage, last.page = stopPageNr)
## ----------------------------------------------------------
for(pageNumber in startPageNr:numberOfPagesToScraping)
{
boardURL <- paste0(url.core, URL.suffix, pageNumber)
boardPage <- goToPage(URL = boardURL)
newOffers <- getOffersInfoFromSingleBoard(page = boardPage, offersTable = offersInfoOutput, sleep = sleep)
offersInfoOutput <- rbind(offersInfoOutput, newOffers)
assign(x = output.name, value = offersInfoOutput, envir = globalenv())
}
## ----------------------------------------------------------
return(offersInfoOutput)
}
y <- getOffersInfo(init.df = x,
stopPageNr = 2, sleep = 5)
table(x$Id)
table(y$Id)
table(y$Id)[ names(table(y$Id)) %in% names(table(y$Id)) ]
length(table(y$Id)[ names(table(y$Id)) %in% names(table(y$Id)) ])
length(table(y$Id)[ names(table(y$Id)) %in% names(table(x$Id)) ])
length(table(x$Id))
length(table(y$Id)[ names(table(y$Id)) %in% names(table(x$Id)) ])
length(!table(y$Id)[ names(table(y$Id)) %in% names(table(x$Id)) ])
table(y$Id)
length(table(y$Id))
length(table(y$Id)[ names(table(y$Id)) %in% names(table(x$Id)) ])
z <- getOffersInfo(init.df = y,
stopPageNr = 2, sleep = 5)
z <- getOffersInfo(init.df = y,
stopPageNr = 2, sleep = 5)
length(table(x$Id))
length(table(y$Id)[ names(table(y$Id)) %in% names(table(x$Id)) ])
length(table(z$Id)[ names(table(z$Id)) %in% names(table(x$Id)) ])
length(table(z$Id)[ names(table(z$Id)) %in% names(table(y$Id)) ])
length(table(z$Id))
